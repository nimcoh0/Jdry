    javax.ws.rs.core.MultivaluedMap<String, Map<String,String>> parameters = new javax.ws.rs.core.MultivaluedHashMap();
    javax.ws.rs.core.MultivaluedMap<String, Object> headers = new javax.ws.rs.core.MultivaluedHashMap<>();
    //List<Object> entities  = new ArrayList<>();
    //javax.ws.rs.client.Entity<?> entity ;
    javax.ws.rs.core.MediaType produce =  javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE;
    javax.ws.rs.core.MediaType consume =  javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE;
    //Class<?> response;


#if (${this.javaUnbox($response, true)} != "void" )
    CallFuture< $this.javaType($response,false)> future = new CallFuture<>();



    public ${this.javaUnbox($response, true)} get_Result() throws Exception{
            try {

               if(!future.isDone()) {
                  logger.debug("waiting to future to be done");
                  future.await();
               }
                logger.debug("successfully get_Result() ");
                return future.get();
             }catch (Exception e){
                 logger.error("fail get_Result() "+ e);
                 throw new Exception("fail get_Result() "+ e);
             }
        }
#else
    CallFuture<java.lang.Void> future = new CallFuture<>();
    public ${this.javaUnbox($response, true)} get_Result() throws Exception{
            try {
                 if(!future.isDone()) {
                    logger.debug("waiting to future to be done");
                    future.await();
                 }
                 logger.debug("successfully get_Result() ");
                 future.get();
             }catch (Exception e){
                logger.error("fail get_Result() "+ e);
                throw new Exception("fail get_Result() "+ e);
             }
        }
#end

    public  ${this.mangle($name)} then(Handler<AsyncResult<$this.javaType($response,false)>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(future.get()));
        return this;
    }


    public  ${this.mangle($name)} then(IListener o)throws Exception{
#if (${this.javaUnbox($response, true)} != "void" )
        future.handleResult(future.get());

#end
        return this;
    }

    public  ${this.mangle($name)} then(IListener o,Handler<AsyncResult<$this.javaType($response,false)>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(future.get()));
        return this;
    }

    public  ${this.mangle($name)} then(IListener o ,CallFuture<$this.javaType($response,false)> future)throws Exception{
        future.handleResult(future.get());
        return this;
    }


    public ${this.mangle($name)} addParameters(javax.ws.rs.core.MultivaluedMap<String, Map<String,String>> parameters){
        this.parameters = parameters;
        return this;
    }

    public ${this.mangle($name)} addParameter(org.softauto.jaxrs.ParamType paramType, String key,String value){
            Map<String,String> m = new HashMap<>();
            m.put(key,value);
            parameters.add(paramType.name(),m);
            return this;
        }

    public ${this.mangle($name)} addHeader(String key,String value){
        headers.add(key,value);
        return this;
    }

    public ${this.mangle($name)} addHeaders(javax.ws.rs.core.MultivaluedMap<String, Object> headers){
        this.headers = headers;
        return this;
    }

    //public ${this.mangle($name)} setEntity(javax.ws.rs.client.Entity<?> entity){
    //    this.entities.add(entity);
    //    return this;
    //}

    public ${this.mangle($name)} setProduce(javax.ws.rs.core.MediaType mediaType){
        this.produce = mediaType;
        return this;
    }

    public ${this.mangle($name)} setConsume(javax.ws.rs.core.MediaType mediaType){
        this.consume = mediaType;
        return this;
    }

    //public ${this.mangle($name)} setResponse(Class<?> response){
     //   this.response = response;
     //   return this;
   // }

    public ${this.mangle($name)} execute(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
    ){
        try {

            HashMap<String,Object> callOptions = new HashMap<>();
            callOptions.put("parameters",parameters);
            callOptions.put("headers",headers);
            //callOptions.put("entity",entities);
            callOptions.put("produce",produce);
            callOptions.put("consume",consume);
            //callOptions.put("response",response);
            logger.debug("invoking proxy for ${this.mangle($name)}");
            new InvocationHandler().invoke("${this.mangle($name)}",$this.getArrayNames($message.getRequest().getFields()),$this.getArrayTypes($message.getRequest().getFields()),future,"${message.getProp("transceiver")}",callOptions);
        }catch (Exception e){
             logger.error("fail invoke for ${this.mangle($name)}"+ e);
        }
        return this;
    }



    public ${this.mangle($name)} execute(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
#if($message.getRequest().getFields().size() > 0)
,##
#end
CallFuture<$this.javaType($response,false)> future){
        try {
            HashMap<String,Object> callOptions = new HashMap<>();
            callOptions.put("parameters",parameters);
            callOptions.put("headers",headers);
            //callOptions.put("entity",entities);
            callOptions.put("produce",produce);
            callOptions.put("consume",consume);
            //callOptions.put("response",response);
            logger.debug("invoking proxy for ${this.mangle($name)}");
            new InvocationHandler().invoke("${this.mangle($name)}",$this.getArrayNames($message.getRequest().getFields()),$this.getArrayTypes($message.getRequest().getFields()),future,"${message.getProp("transceiver")}",callOptions);
        }catch (Exception e){
             logger.error("fail invoke for ${this.mangle($name)}"+ e);
        }
        return this;
 }


    public  ${this.mangle($name)} execute(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
#if($message.getRequest().getFields().size() > 0)
,##
#end
Handler<AsyncResult<$this.javaType($response,false)>> resultHandler  )throws Exception{
        try {
            HashMap<String,Object> callOptions = new HashMap<>();
            callOptions.put("parameters",parameters);
            callOptions.put("headers",headers);
            //callOptions.put("entity",entities);
            callOptions.put("produce",produce);
            callOptions.put("consume",consume);
            //callOptions.put("response",response);
            CallFuture<$this.javaType($response,false)> future = new CallFuture<>();
            logger.debug("invoking proxy for ${this.mangle($name)}");
            new InvocationHandler().invoke("${this.mangle($name)}",$this.getArrayNames($message.getRequest().getFields()),$this.getArrayTypes($message.getRequest().getFields()),future,"${message.getProp("transceiver")}",callOptions);
            resultHandler.handle(Future.handleResult(future.get()));
       }catch (Exception e){
          logger.error("fail invoke for ${this.mangle($name)}"+ e);
          resultHandler.handle(Future.handleError(e));
       }
       return this;
    }




 }