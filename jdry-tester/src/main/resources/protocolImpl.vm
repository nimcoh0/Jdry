#if ($protocol.getNamespace())
package $this.mangle($protocol.getNamespace());
#end
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

#if ($protocol.getDoc())
/** $protocol.getDoc() */
#end
#foreach ($annotation in $this.javaAnnotations($protocol))
@$annotation
#end
@org.apache.avro.specific.AvroGenerated
public class $this.mangle($protocol.getName())Impl {

    private static org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger($this.mangle($protocol.getName())Impl.class);

    public $this.mangle($protocol.getName())Impl(){
          try {
             if( Class.forName("org.softauto.dispatcher.ListenerObserver", false, this.getClass().getClassLoader())!= null){
                 org.softauto.dispatcher.ListenerObserver.getInstance().register("tests.infrastructure.ListenerServiceImpl", this);
             }
         }catch (Exception e){
           // e.printStackTrace();
         }
    }

    public $this.mangle($protocol.getName())Impl(String name){
          try {
             if( Class.forName("org.softauto.dispatcher.ListenerObserver", false, this.getClass().getClassLoader())!= null){
                 org.softauto.dispatcher.ListenerObserver.getInstance().register(name, this);
             }
         }catch (Exception e){
           // e.printStackTrace();
         }
    }

#foreach ($e in $protocol.getMessages().entrySet())
#set ($name = $e.getKey())
#set ($message = $e.getValue())
#set ($response = $message.getResponse())
  /**
#if ($message.getDoc())
   * $this.escapeForJavadoc($message.getDoc())
#end
#foreach ($p in $message.getRequest().getFields())##
#if ($p.doc())   * @param ${this.mangle($p.name())} $p.doc()
#end
#end
   */
#foreach ($annotation in $this.javaAnnotations($message))
  @$annotation
#end
public ##
java.lang.Object[] ${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
){
#if($message.hasContent())
    $message.getContent()
#else
 LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " ${this.mangle($name)} args :" ##
   #foreach ($p in $message.getRequest().getFields())##
   #*      *# +" ${this.mangle($p.name())}:" + ${this.mangle($p.name())}#if ($foreach.hasNext) #end
   #end##
   );

   #if (${this.javaUnbox($response, true)} != "void" )
   return new Object[]{##
        #foreach ($p in $message.getRequest().getFields())##
            ${this.mangle($p.name())}#if ($foreach.hasNext), #end##
        #end
        };
   #else
   return new Object[]{};
   #end
 #end
}


#end## (requests)
}## End of protocol interface
