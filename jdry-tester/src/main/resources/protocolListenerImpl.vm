#if ($protocol.getNamespace())
package $this.mangle($protocol.getNamespace());
#end
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import org.softauto.core.AsyncResult;
import org.softauto.core.Handler;
import org.softauto.core.Future;
import org.softauto.serializer.CallFuture;
import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;
import java.lang.reflect.Parameter;
import org.softauto.core.Utils;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import java.util.HashMap;
import org.softauto.espl.ExpressionBuilder;
import org.softauto.espl.EvulExp;
import org.softauto.core.IListener;

@org.apache.avro.specific.AvroGenerated
public class Listener {

    private static org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(Listener.class);
    public static long timeOutInMin = 1;
    static Map<String, Object> map = null;

    public static void setTimeOut(long min){
        timeOutInMin = min;
    }




#foreach ($e in $protocol.getMessages().entrySet())
#set ($name = $e.getKey())
#set ($message = $e.getValue())
#set ($response = $message.getResponse())

public static class ${this.mangle($name)} implements IListener{
    private static ${this.mangle($name)} ${this.unCapitalizeFirstLetter(${this.mangle($name)})}= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
#if (${this.javaUnbox($response, true)} != "void" )
    ${this.javaUnbox($response, true)} _result;
#end
#foreach ($p in $message.getRequest().getFields())##
    static ${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())} = $this.getDefaultValue($p.schema().getName());
#end

    public ##
    java.lang.Object[] ${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " ${this.mangle($name)} args :" ##
#foreach ($p in $message.getRequest().getFields())##
#*      *# +" ${this.mangle($p.name())}:" + ${this.mangle($p.name())}#if ($foreach.hasNext) #end
#end##
       );

       return new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
                ${this.mangle($p.name())}#if ($foreach.hasNext), #end##
#end
            };
    }




#if (${this.javaUnbox($response, true)} != "void" )
#if($message.getRequest().getFields().size() == 0 || $message.getRequest().getFields().size() > 1 || ($message.getRequest().getFields().size() == 1 && !$response.getType().equals($message.getRequest().getFields()[0].schema().getType())))
    public void ${this.mangle($name)}(${this.javaUnbox($response, true)} result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " ${this.mangle($name)} args :${this.javaUnbox($response, true)} " + result);
     _result = result;
    }

#end
#end

    public static ${this.mangle($name)} waitUntil(ExpressionBuilder exp){
    ${this.mangle($name)} _waitUntil = null;
    //if(${this.unCapitalizeFirstLetter(${this.mangle($name)})} == null){
            try{
                logger.debug("waiting for ${this.mangle($name)}");
                //${this.unCapitalizeFirstLetter(${this.mangle($name)})} = new ${this.mangle($name)}();
                lock = new CountDownLatch(1);
                _waitUntil =  new ${this.mangle($name)}(){
                        @Override
                        public synchronized Object[] ${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>($message.getRequest().getFields().size());
#foreach ($p in $message.getRequest().getFields())##
                        params.put("$p.name()", $p.name());
#end
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for ${this.mangle($name)}");
                            seen = true;
                            logger.debug("got call for ${this.mangle($name)} seen:"+seen);
#foreach ($p in $message.getRequest().getFields())##
                            ${this.mangle($name)}.${this.mangle($p.name())} = ${this.mangle($name)}.${this.mangle($p.name())} == $this.getDefaultValue($p.schema().getName()) ? ${this.mangle($p.name())} : ${this.mangle($name)}.${this.mangle($p.name())};
#end
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("${this.mangle($name)}");
                            lock.countDown();
                            return new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($name)}.${this.mangle($p.name())}#if($foreach.hasNext),#end##
#end
};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($p.name())}#if($foreach.hasNext),#end##
#end
};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("${this.mangle($name)}", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to ${this.mangle($name)}");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static ${this.mangle($name)} waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    ${this.mangle($name)} _waitUntil = null;
    //if(${this.unCapitalizeFirstLetter(${this.mangle($name)})} == null){
            try{
                logger.debug("waiting for ${this.mangle($name)}");
                //${this.unCapitalizeFirstLetter(${this.mangle($name)})} = new ${this.mangle($name)}();
                lock = new CountDownLatch(1);
                _waitUntil =  new ${this.mangle($name)}(){
                        @Override
                        public synchronized Object[] ${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>($message.getRequest().getFields().size());
#foreach ($p in $message.getRequest().getFields())##
                        params.put("$p.name()", $p.name());
#end
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for ${this.mangle($name)}");
                            seen = true;
                            logger.debug("got call for ${this.mangle($name)} seen:"+seen);
#foreach ($p in $message.getRequest().getFields())##
                            ${this.mangle($name)}.${this.mangle($p.name())} = ${this.mangle($name)}.${this.mangle($p.name())} == $this.getDefaultValue($p.schema().getName()) ? ${this.mangle($p.name())} : ${this.mangle($name)}.${this.mangle($p.name())};
#end
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("${this.mangle($name)}");
                            future.handleResult(new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($name)}.${this.mangle($p.name())}#if($foreach.hasNext),#end##
#end
});
                             lock.countDown();
                             return new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($name)}.${this.mangle($p.name())}#if($foreach.hasNext),#end##
#end
};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($p.name())}#if($foreach.hasNext),#end##
#end
};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("${this.mangle($name)}", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to ${this.mangle($name)}");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<${this.mangle($name)}>> resultHandler)throws Exception{
    ${this.mangle($name)} _waitUntil = null;
    //if(${this.unCapitalizeFirstLetter(${this.mangle($name)})} == null){
            try{
                logger.debug("waiting for ${this.mangle($name)}");
                //${this.unCapitalizeFirstLetter(${this.mangle($name)})} = new ${this.mangle($name)}();
                lock = new CountDownLatch(1);
                _waitUntil =  new ${this.mangle($name)}(){
                        @Override
                        public synchronized Object[] ${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>($message.getRequest().getFields().size());
#foreach ($p in $message.getRequest().getFields())##
                        params.put("$p.name()", $p.name());
#end
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for ${this.mangle($name)}");
                            seen = true;
                            logger.debug("got call for ${this.mangle($name)} seen:"+seen);
#foreach ($p in $message.getRequest().getFields())##
                            ${this.mangle($name)}.${this.mangle($p.name())} = ${this.mangle($name)}.${this.mangle($p.name())} == $this.getDefaultValue($p.schema().getName()) ? ${this.mangle($p.name())} : ${this.mangle($name)}.${this.mangle($p.name())};
#end
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("${this.mangle($name)}");
                            lock.countDown();
                            return new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($name)}.${this.mangle($p.name())}#if($foreach.hasNext),#end##
#end
};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($p.name())}#if($foreach.hasNext),#end##
#end
};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("${this.mangle($name)}", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to ${this.mangle($name)}");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static ${this.mangle($name)} waitTo(CallFuture<Object[]> future){
    ${this.mangle($name)} _waitTo = null;
    //if(${this.unCapitalizeFirstLetter(${this.mangle($name)})} == null){
            try{
                logger.debug("waiting for ${this.mangle($name)}");
                //${this.unCapitalizeFirstLetter(${this.mangle($name)})} = new ${this.mangle($name)}();
                lock = new CountDownLatch(1);
                _waitTo =  new ${this.mangle($name)}(){
                        @Override
                        public Object[] ${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
){
                        try{
                            logger.debug("done waiting for ${this.mangle($name)}");
                            seen = true;
                            logger.debug("got call for ${this.mangle($name)} seen:"+seen);
#foreach ($p in $message.getRequest().getFields())##
                            ${this.mangle($name)}.${this.mangle($p.name())} = ${this.mangle($name)}.${this.mangle($p.name())} == $this.getDefaultValue($p.schema().getName()) ? ${this.mangle($p.name())} : ${this.mangle($name)}.${this.mangle($p.name())};
#end
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("${this.mangle($name)}");
                            future.handleResult(new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($name)}.${this.mangle($p.name())}#if($foreach.hasNext),#end##
#end
});
                            lock.countDown();
                            return new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($name)}.${this.mangle($p.name())}#if($foreach.hasNext),#end##
#end
};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("${this.mangle($name)}", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to ${this.mangle($name)}");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static ${this.mangle($name)} waitTo(){
    ${this.mangle($name)} _waitTo = null;
    //if(${this.unCapitalizeFirstLetter(${this.mangle($name)})} == null){
            try{
                logger.debug("waiting for ${this.mangle($name)}");
                //${this.unCapitalizeFirstLetter(${this.mangle($name)})} = new ${this.mangle($name)}();
                lock = new CountDownLatch(1);
                _waitTo =  new ${this.mangle($name)}(){
                        @Override
                        public Object[] ${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
){
                        try{
                            logger.debug("done waiting for ${this.mangle($name)}");
                            seen = true;
                            logger.debug("got call for ${this.mangle($name)} seen:"+seen);
#foreach ($p in $message.getRequest().getFields())##
                            ${this.mangle($name)}.${this.mangle($p.name())} = ${this.mangle($name)}.${this.mangle($p.name())} == $this.getDefaultValue($p.schema().getName()) ? ${this.mangle($p.name())} : ${this.mangle($name)}.${this.mangle($p.name())};
#end
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("${this.mangle($name)}");
                            lock.countDown();
                            return new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($name)}.${this.mangle($p.name())}#if($foreach.hasNext),#end##
#end
            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("${this.mangle($name)}", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to ${this.mangle($name)}");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static ${this.mangle($name)} waitTo(Handler<AsyncResult<${this.mangle($name)}>> resultHandler)throws Exception{
    ${this.mangle($name)} _waitTo = null;
    //if(${this.unCapitalizeFirstLetter(${this.mangle($name)})} == null){
            try{
                logger.debug("waiting for ${this.mangle($name)}");
               // ${this.unCapitalizeFirstLetter(${this.mangle($name)})} = new ${this.mangle($name)}();
                lock = new CountDownLatch(1);
                _waitTo = new ${this.mangle($name)}(){
                     @Override
                     public Object[] ${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
                        ${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
){
                    try{
                        logger.debug("done waiting for ${this.mangle($name)}");
                        seen = true;
                        logger.debug("got call for ${this.mangle($name)} seen:"+seen);
#foreach ($p in $message.getRequest().getFields())##
                         ${this.mangle($name)}.${this.mangle($p.name())} = ${this.mangle($name)}.${this.mangle($p.name())} == $this.getDefaultValue($p.schema().getName()) ? ${this.mangle($p.name())} : ${this.mangle($name)}.${this.mangle($p.name())};
#end
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("${this.mangle($name)}");
                         lock.countDown();
                         return new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($name)}.${this.mangle($p.name())}#if($foreach.hasNext),#end##
#end
                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("${this.mangle($name)}", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to ${this.mangle($name)}");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }


#if (${this.javaUnbox($response, true)} != "void" )
#if($message.getRequest().getFields().size() == 0 || $message.getRequest().getFields().size() > 1 || ($message.getRequest().getFields().size() == 1 && !$response.getType().equals($message.getRequest().getFields()[0].schema().getType())))
    public static ${this.mangle($name)} waitToResult(){
    ${this.mangle($name)} _waitToResult = null;
    //if(${this.unCapitalizeFirstLetter(${this.mangle($name)})} == null){
            try{
                logger.debug("waiting for result of ${this.mangle($name)}");
                //${this.unCapitalizeFirstLetter(${this.mangle($name)})} = new ${this.mangle($name)}();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new ${this.mangle($name)}(){
                        public void ${this.mangle($name)}(${this.javaUnbox($response, true)} result){
                        try{
                            logger.debug("done waiting for ${this.mangle($name)}");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("${this.mangle($name)}");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("${this.mangle($name)}", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to ${this.mangle($name)}");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static ${this.mangle($name)} waitToResult(CallFuture<$this.javaType($response,false)> future){
    ${this.mangle($name)} _waitToResult = null;
    //if(${this.unCapitalizeFirstLetter(${this.mangle($name)})} == null){
            try{
                logger.debug("waiting for result of ${this.mangle($name)}");
                //${this.unCapitalizeFirstLetter(${this.mangle($name)})} = new ${this.mangle($name)}();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new ${this.mangle($name)}(){
                        public void ${this.mangle($name)}(${this.javaUnbox($response, true)} result){
                        try{
                            logger.debug("done waiting for ${this.mangle($name)}");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("${this.mangle($name)}");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("${this.mangle($name)}", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to ${this.mangle($name)}");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<${this.mangle($name)}>> resultHandler)throws Exception{
    ${this.mangle($name)} _waitToResult = null;
    //if(${this.unCapitalizeFirstLetter(${this.mangle($name)})} == null){
            try{
                logger.debug("waiting for result of ${this.mangle($name)}");
                //${this.unCapitalizeFirstLetter(${this.mangle($name)})} = new ${this.mangle($name)}();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new ${this.mangle($name)}(){
                public void ${this.mangle($name)}(${this.javaUnbox($response, true)} result){
                try{
                   logger.debug("done waiting for ${this.mangle($name)}");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("${this.mangle($name)}");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("${this.mangle($name)}", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to ${this.mangle($name)}");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }
#end



    public ${this.javaUnbox($response, true)} get_Result()throws Exception{
        return _result;
    }

    public ${this.mangle($name)} get_Result(Handler<AsyncResult<$this.javaType($response,false)>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public ${this.mangle($name)} get_Result(CallFuture<$this.javaType($response,false)> future){
         future.handleResult(_result);
         return this;
    }


#end


#foreach ($p in $message.getRequest().getFields())##
    public ${this.javaUnbox($p.schema(), false)} get${this.capitalizeFirstLetter(${this.mangle($p.name())})}()throws Exception{
        return ${this.mangle($name)}.${this.mangle($p.name())};
    }

    public ${this.mangle($name)} get${this.capitalizeFirstLetter(${this.mangle($p.name())})}(Handler<AsyncResult<$this.javaType($p.schema(),false)>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(${this.mangle($name)}.${this.mangle($p.name())}));
        return this;
    }

    public ${this.mangle($name)} get${this.capitalizeFirstLetter(${this.mangle($p.name())})}(CallFuture<$this.javaType($p.schema(), false)> future)throws Exception{
       future.handleResult(${this.mangle($name)}.${this.mangle($p.name())});
       return this;
    }

    public ${this.unCapitalizeFirstLetter(${this.mangle($name)})} set${this.capitalizeFirstLetter(${this.mangle($p.name())})}(${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())})throws Exception{
        ${this.mangle($name)}.${this.mangle($p.name())} = ${this.mangle($p.name())};
        return this;
    }

#end




}

#end## (requests)
}## End of protocol interface
