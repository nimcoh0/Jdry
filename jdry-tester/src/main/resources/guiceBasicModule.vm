#if ($protocol.getNamespace())
package $this.mangle($protocol.getNamespace());
#end
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.inject.AbstractModule;
import com.google.inject.TypeLiteral;
import com.google.inject.matcher.Matchers;
import com.google.inject.spi.TypeListener;
import org.softauto.guice.JvmTypeListener;
import org.softauto.guice.InitializeNoParamProvider;
import com.google.inject.multibindings.Multibinder;
import org.softauto.guice.InitializeParamProvider;
import com.fasterxml.jackson.databind.ObjectMapper;

@org.apache.avro.specific.AvroGenerated
public class $this.mangle($protocol.getName())Module extends AbstractModule {

    private static Logger logger = LogManager.getLogger($this.mangle($protocol.getName())Module.class);

    @Override
    protected void configure() {
    try{
#foreach ($e in $protocol.getMessages().entrySet())
#set ($name = $e.getKey())
#set ($message = $e.getValue())
#set ($class = $message.getJsonProp("class"))
#set ($fullClassName = $class.get("fullClassName").asText())
#set ($initialize = $class.get("initialize").asText())
#if(!$guicehelper.isBind($fullClassName))
$guicehelper.addBind($fullClassName)##
#if($initialize.equals("INITIALIZE_NO_PARAM"))
        bind(${fullClassName}.class).toProvider(InitializeNoParamProvider.getProvider(${fullClassName}.class));
#end
#if($initialize.equals("SINGLETON"))
        bind(${fullClassName}.class).toProvider(SingletonProvider.getProvider(${fullClassName}.class));
#end
#if($initialize.equals("INITIALIZE"))
#foreach ($p in $message.getRequest().getFields())##
#if(!$p.schema().isPrimitive())
#if($p.hasDefaultValue() &&  $this.isJson($p.defaultValue()))
        $p.schema().getFullName() $p.name() = new ObjectMapper().readValue($p.defaultValue().get("value"),${p.schema().getFullName()}.class);
#else
#set ($varName = $guicehelper.getVarName($p.name()))
$p.setName($varName)##
        $p.schema().getFullName() $varName = null;
#end
#end
#end
        bind(${fullClassName}.class).toProvider(InitializeParamProvider.getProvider(${fullClassName}.class,new Class[]{##
#foreach ($p in $message.getRequest().getFields())##
    ${this.javaType($p.schema())}.class #if($foreach.hasNext),#end##
#end
},new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
#if($p.schema().isPrimitive())
#if($p.hasDefaultValue()) ${p.defaultValue()} #else null #end
#else
$p.name() ##
#end
#if($foreach.hasNext),#end##
#end
}));
#end
#end
#end
}catch(Exception e){
    e.printStackTrace();
}
    }
}## End of protocol interface
