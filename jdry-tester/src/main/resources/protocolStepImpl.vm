#if ($protocol.getNamespace())
package $this.mangle($protocol.getNamespace());
#end
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import org.softauto.core.AsyncResult;
import org.softauto.core.CallOptions;
import org.softauto.core.Handler;
import org.softauto.core.Future;
import org.softauto.serializer.CallFuture;
import org.softauto.tester.InvocationHandler;
import org.softauto.core.IListener;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;

@org.apache.avro.specific.AvroGenerated
public class Step extends org.softauto.tester.Step{

    private static org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(Step.class);
    CallFuture<Object> future = new CallFuture<>();

    public Step(){
        super();
    }

        public Step(String fqmn, Object[] args, Class[] types, String transceiver)throws Exception{
            future = new CallFuture<>();
            logger.debug("invoking " +fqmn);
            new InvocationHandler().invoke(fqmn,args,types,future,transceiver);
        }

        public Step(String fqmn, Object[] args, Class[] types, String transceiver,CallOptions callOptions)throws Exception{
            future = new CallFuture<>();
            logger.debug("invoking " +fqmn);
            new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions.getOptions());
        }


        public <T> Step(String fqmn, Object[] args, Class[] types, String transceiver, CallFuture<T> future)throws Exception{
            logger.debug("invoking " +fqmn);
            new InvocationHandler().invoke(fqmn,args,types,future,transceiver);
        }

        public <T> Step(String fqmn, Object[] args, Class[] types, String transceiver, CallFuture<T> future,CallOptions callOptions)throws Exception{
            logger.debug("invoking " +fqmn);
            new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions.getOptions());
        }

        public <T>Step(String fqmn, Object[] args, Class[] types, String transceiver, Handler<AsyncResult<T>> resultHandler)throws Exception{
            CallFuture<Object> future = new CallFuture<>();
            logger.debug("invoking " +fqmn);
            new InvocationHandler().invoke(fqmn,args,types,future,transceiver);
            resultHandler.handle(Future.handleResult((T)future.get()));
        }

        public <T>Step(String fqmn, Object[] args, Class[] types, String transceiver, Handler<AsyncResult<T>> resultHandler,CallOptions callOptions)throws Exception{
            CallFuture<Object> future = new CallFuture<>();
            logger.debug("invoking " +fqmn);
            new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions.getOptions());
            resultHandler.handle(Future.handleResult((T)future.get()));
        }


#foreach ($e in $protocol.getMessages().entrySet())
#set ($name = $e.getKey())
#set ($message = $e.getValue())
#set ($response = $message.getResponse())

public static class ${this.mangle($name)} {

#if($message.getProp("transceiver").equals("RPC"))
#parse( "grpcStepImpl.vm" )
#end
#if($message.getProp("transceiver").equals("JAXRS"))
#parse( "jaxrsStepImpl.vm" )
#end
#if($message.getProp("transceiver").equals("LOCAL"))
#parse( "localStepImpl.vm" )
#end
#end## (requests)
}## End of protocol interface
