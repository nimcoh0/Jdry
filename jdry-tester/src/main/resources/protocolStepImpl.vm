#if ($protocol.getNamespace())
package $this.mangle($protocol.getNamespace());
#end
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import org.softauto.core.AsyncResult;
import org.softauto.core.Handler;
import org.softauto.core.Future;
import org.softauto.serializer.CallFuture;
import org.softauto.tester.InvocationHandler;
import org.softauto.core.IListener;

@org.apache.avro.specific.AvroGenerated
public class Step {

    private static org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(Step.class);



#foreach ($e in $protocol.getMessages().entrySet())
#set ($name = $e.getKey())
#set ($message = $e.getValue())
#set ($response = $message.getResponse())

public static class ${this.capitalizeFirstLetter(${this.mangle($name)})} {


#if (${this.javaUnbox($response, true)} != "void" )
    CallFuture< $this.javaType($response,false)> future = new CallFuture<>();
    public ${this.javaUnbox($response, true)} get_Result() throws Exception{
            try {

               if(!future.isDone()) {
                  logger.debug("waiting to future to be done");
                  future.await();
               }
                logger.debug("successfully get_Result() ");
                return future.get();
             }catch (Exception e){
                 logger.error("fail get_Result() "+ e);
                 throw new Exception("fail get_Result() "+ e);
             }
        }
#else
    CallFuture<java.lang.Void> future = new CallFuture<>();
    public ${this.javaUnbox($response, true)} get_Result() throws Exception{
            try {
                 if(!future.isDone()) {
                    logger.debug("waiting to future to be done");
                    future.await();
                 }
                 logger.debug("successfully get_Result() ");
                 future.get();
             }catch (Exception e){
                logger.error("fail get_Result() "+ e);
                throw new Exception("fail get_Result() "+ e);
             }
        }
#end

    public  ${this.capitalizeFirstLetter(${this.mangle($name)})} then(Handler<AsyncResult<$this.javaType($response,false)>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(future.get()));
        return this;
    }


    public  ${this.capitalizeFirstLetter(${this.mangle($name)})} then(IListener o)throws Exception{
#if (${this.javaUnbox($response, true)} != "void" )
        future.handleResult(future.get());

#end
        return this;
    }

    public  ${this.capitalizeFirstLetter(${this.mangle($name)})} then(IListener o,Handler<AsyncResult<$this.javaType($response,false)>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(future.get()));
        return this;
    }

    public  ${this.capitalizeFirstLetter(${this.mangle($name)})} then(IListener o ,CallFuture<$this.javaType($response,false)> future)throws Exception{
        future.handleResult(future.get());
        return this;
    }



    public ${this.capitalizeFirstLetter(${this.mangle($name)})}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
    ){
        try {
            logger.debug("invoking proxy for ${this.mangle($name)}");
            new InvocationHandler().invoke("${this.mangle($name)}",$this.getArrayNames($message.getRequest().getFields()),$this.getArrayTypes($message.getRequest().getFields()),future,"${message.getProp("transceiver")}");
        }catch (Exception e){
             logger.error("fail invoke for ${this.mangle($name)}"+ e);
        }
    }



    public ${this.capitalizeFirstLetter(${this.mangle($name)})}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
#if($message.getRequest().getFields().size() > 0)
,##
#end
CallFuture<$this.javaType($response,false)> future){
        try {
            logger.debug("invoking proxy for ${this.mangle($name)}");
            new InvocationHandler().invoke("${this.mangle($name)}",$this.getArrayNames($message.getRequest().getFields()),$this.getArrayTypes($message.getRequest().getFields()),future,"${message.getProp("transceiver")}");
        }catch (Exception e){
             logger.error("fail invoke for ${this.mangle($name)}"+ e);
        }
 }


    public  ${this.capitalizeFirstLetter(${this.mangle($name)})}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
#if($message.getRequest().getFields().size() > 0)
,##
#end
Handler<AsyncResult<$this.javaType($response,false)>> resultHandler  )throws Exception{
        try {
            CallFuture<$this.javaType($response,false)> future = new CallFuture<>();
            logger.debug("invoking proxy for ${this.mangle($name)}");
            new InvocationHandler().invoke("${this.mangle($name)}",$this.getArrayNames($message.getRequest().getFields()),$this.getArrayTypes($message.getRequest().getFields()),future,"${message.getProp("transceiver")}");
            resultHandler.handle(Future.handleResult(future.get()));
       }catch (Exception e){
          logger.error("fail invoke for ${this.mangle($name)}"+ e);
          resultHandler.handle(Future.handleError(e));
       }
    }




 }
#end## (requests)
}## End of protocol interface
