#if ($protocol.getNamespace())
package $this.mangle($protocol.getNamespace());
#end
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import org.softauto.core.AsyncResult;
import org.softauto.core.Handler;
import org.softauto.core.Future;
import org.softauto.serializer.CallFuture;
import org.softauto.tester.Client;

@org.apache.avro.specific.AvroGenerated
public class $this.mangle($protocol.getName())Impl {

    private static org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger($this.mangle($protocol.getName())Impl.class);


    public static LocalStepService localTests;
    public static LocalStepService.Callback localAsyncTests;

    public $this.mangle($protocol.getName())Impl (){
        try {
            localTests = Client.create(tests.infrastructure.LocalStepService.class);
            localAsyncTests = Client.create(tests.infrastructure.LocalStepService.Callback.class);
        }catch (Exception e){
             e.printStackTrace();
        }
    }

#foreach ($e in $protocol.getMessages().entrySet())
#set ($name = $e.getKey())
#set ($message = $e.getValue())
#set ($response = $message.getResponse())

public static class ${this.capitalizeFirstLetter(${this.mangle($name)})} {

#if (${this.javaUnbox($response, true)} != "void" )
    CallFuture< $this.javaType($response,false)> future = new CallFuture<>();

    public ${this.javaUnbox($response, true)} get_Result(){
        try {
            return future.get();
         }catch (Exception e){
             e.printStackTrace();
         }
         return $this.getDefaultValue(${this.javaUnbox($response, true)});
    }
#else
    CallFuture<java.lang.Void> future = new CallFuture<>();

     public ${this.javaUnbox($response, true)} get_Result(){
            try {
                future.get();
             }catch (Exception e){
                 e.printStackTrace();
             }
        }
#end


    public  ${this.capitalizeFirstLetter(${this.mangle($name)})} then(Object o){
#if (${this.javaUnbox($response, true)} != "void" )
future.handleResult(($this.javaType($response,false))o);

#end
        return this;
    }

    public  ${this.capitalizeFirstLetter(${this.mangle($name)})} then(Object o,Handler<AsyncResult<java.lang.Object>> resultHandler){
        resultHandler.handle(Future.handleResult(o));
        return this;
    }

    public  ${this.capitalizeFirstLetter(${this.mangle($name)})} then(Object o ,CallFuture<java.lang.Object> future){
        future.handleResult(o);
        return this;
    }



    public ${this.capitalizeFirstLetter(${this.mangle($name)})}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
    ){
        try {
            localAsyncTests.${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($p.name())}#if ($foreach.hasNext), #end##
#end
,future);
        }catch (Exception e){
             e.printStackTrace();
        }
 }



    public ${this.capitalizeFirstLetter(${this.mangle($name)})}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
, CallFuture<$this.javaType($response,false)> future){
        try {
            localAsyncTests.${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($p.name())}#if ($foreach.hasNext), #end##
#end
,future);
        }catch (Exception e){
             e.printStackTrace();
        }
 }


    public  ${this.capitalizeFirstLetter(${this.mangle($name)})}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} ${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
  ,Handler<AsyncResult<$this.javaType($response,false)>> resultHandler  ){
         try {
            CallFuture<$this.javaType($response,false)> future = new CallFuture<>();
            localAsyncTests.${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
${this.mangle($p.name())}#if ($foreach.hasNext), #end##
#end
,future);
            resultHandler.handle(Future.handleResult(future.get()));
       }catch (Exception e){
          resultHandler.handle(Future.handleError(e));
       }
    }

 }
#end## (requests)
}## End of protocol interface
