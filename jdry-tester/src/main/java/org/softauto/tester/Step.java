/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.softauto.tester;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.softauto.core.*;
import org.softauto.serializer.CallFuture;

import java.util.HashMap;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

@org.apache.avro.specific.AvroGenerated
public class Step {

    private static Logger logger = LogManager.getLogger(Step.class);
    CallFuture<Object> future = null;
    protected HashMap<String,Object> callOptions = null;
    CountDownLatch lock ;
    public static long timeOutInMin = 1L;

    public Step(){};

    public Step(CallOptions callOptions){
        this.callOptions = callOptions.getOptions();
    }

    public <T> T get_Result() throws Exception{
            try {

               if(!future.isDone()) {
                  logger.debug("waiting to future to be done");
                  future.await();
               }
                logger.debug("successfully get_Result() ");
                return (T)future.get();
             }catch (Exception e){
                 logger.error("fail get_Result() "+ e);
                 throw new Exception("fail get_Result() "+ e);
             }
        }


    public Step(String fqmn, Object[] args, Class[] types, String transceiver)throws Exception{
        future = new CallFuture<>();
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver);
    }

    public Step(String fqmn, Object[] args, Class[] types, String transceiver,HashMap<String, Object> callOptions)throws Exception{
        future = new CallFuture<>();
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions);
    }

    public Step(String fqmn, Object[] args, Class[] types, String transceiver,CallOptions callOptions)throws Exception{
        future = new CallFuture<>();
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions.getOptions());
    }


    public Step(String fqmn, Object[] args, Class[] types, String transceiver,CallOptions callOptions,Class<?> returnType)throws Exception{
        future = new CallFuture<>();
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions.getOptions(),returnType);
    }


    public Step(String fqmn, Object[] args, Class[] types, String transceiver,HashMap<String, Object> callOptions,Class<?> returnType)throws Exception{
        future = new CallFuture<>();
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions,returnType);
        lock = future.getLatch();

    }





    public <T> Step(String fqmn, Object[] args, Class[] types, String transceiver, CallFuture<T> future)throws Exception{
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver);
    }

    public <T> Step(String fqmn, Object[] args, Class[] types, String transceiver, CallFuture<T> future,HashMap<String, Object> callOptions)throws Exception{
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions);
    }

    public <T>Step(String fqmn, Object[] args, Class[] types, String transceiver, Handler<AsyncResult<T>> resultHandler)throws Exception{
        CallFuture<Object> future = new CallFuture<>();
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver);
        resultHandler.handle(Future.handleResult((T)future.get()));
    }

    public <T>Step(String fqmn, Object[] args, Class[] types, String transceiver, Handler<AsyncResult<T>> resultHandler,HashMap<String, Object> callOptions)throws Exception{
        CallFuture<Object> future = new CallFuture<>();
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions);
        resultHandler.handle(Future.handleResult((T)future.get()));
    }

        public <T> Step then(Handler<AsyncResult<T>> resultHandler)throws Exception{
            resultHandler.handle(Future.handleResult((T)future.getResult()));
            return this;
        }


        public Step then(IListener o)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

        public Step then(IStep o)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

        public <T> Step then(IListener o, Handler<AsyncResult<T>> resultHandler)throws Exception{
            if(!future.isDone()){
                lock.await(timeOutInMin, TimeUnit.MINUTES);
            }
            resultHandler.handle(Future.handleResult((T) future.getResult()));
            return this;
        }

        public <T> Step then(IStep o, Handler<AsyncResult<T>> resultHandler)throws Exception{
            if(!future.isDone()){
                lock.await(timeOutInMin, TimeUnit.MINUTES);
            }
            resultHandler.handle(Future.handleResult((T) future.getResult()));
            return this;
        }

        public <T> Step then(IListener o , CallFuture<T> future)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

        public <T> Step then(IStep o , CallFuture<T> future)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

}