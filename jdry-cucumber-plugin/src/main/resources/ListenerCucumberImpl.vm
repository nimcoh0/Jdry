#if ($protocol.getNamespace())
package $this.mangle($protocol.getNamespace());
#end
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import io.cucumber.java.en.When;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.cucumber.java.ParameterType;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.lang.reflect.Field;
import org.softauto.core.Utils;
import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;
import io.cucumber.java.en.Then;
import org.junit.Assert;
import java.util.List;
import org.softauto.cucumber.*;

#if ($protocol.getDoc())
/** $protocol.getDoc() */
#end
#foreach ($annotation in $this.javaAnnotations($protocol))
@$annotation
#end
@org.apache.avro.specific.AvroGenerated
public class $this.mangle($protocol.getName())CucumberImpl  extends CucumberAbstractTesterImpl{
#if($protocol.getMessages().size() > 0)
    private static Logger logger = LogManager.getLogger($this.mangle($protocol.getName())CucumberImpl.class);

    public $this.mangle($protocol.getName())CucumberImpl(){
          try {
             if( Class.forName("org.softauto.listener.ListenerObserver", false, this.getClass().getClassLoader())!= null){
                 org.softauto.tester.listener.ListenerObserver.getInstance().register("tests.infrastructure.ListenerServiceCucumberImpl", this);
             }
             registerGlueClass(this);
         }catch (Exception e){
           // e.printStackTrace();
         }
    }



#set ($exp = $cucumberutils.getVarName("exp"))

 @ParameterType(".*")
 public String $exp (String $exp) throws Exception{
     return $exp;
 }


@Then("validate listener result of {$exp}")
public void validate(String $exp)throws Exception{
    String left = CucumberUtils.getLeft($exp);
        String right = CucumberUtils.getRight($exp);
        String operator = CucumberUtils.getOperator($exp);
        boolean result = getResult(CucumberUtils.expToGetter(left) +" "+ operator +" "+ CucumberUtils.expToGetter(right));
        Assert.assertTrue(result);
}


#foreach ($e in $protocol.getMessages().entrySet())
#set ($name = $e.getKey())
#set ($message = $e.getValue())
#set ($response = $message.getResponse())
#set ($fullClassName = $message.getProp("namespace"))


#foreach ($p in $message.getRequest().getFields())##
#set ($varName = $cucumberutils.getVarName($p.name()))
$p.setName($varName)
$cucumberutils.addVarName($varName)

public ${this.javaUnbox($p.schema(),false)} $cucumberutils.getShortVarName(${this.mangle($name)})_$p.name();


#if($message.hasThenDescription())
@Then("$message.getThenDescription()")
#else
#if(!$name.contains("_result"))##
@Then("$cucumberutils.getDefaultSentence(${this.mangle($name)}) $cucumberutils.getOriginalVarName(${p.name()}) {$exp}")
#else
@Then("result of $cucumberutils.getDefaultSentence(${this.mangle($name)}) $cucumberutils.getOriginalVarName(${p.name()}) {$exp}")
#end
#end
public void validate_$cucumberutils.getMethodName(${this.mangle($name)})_${p.name()}(String $exp )throws Exception{
    String left = CucumberUtils.getLeft($exp);
    String right = CucumberUtils.getRight($exp);
    String operator = CucumberUtils.getOperator($exp);
    boolean result = getResult(CucumberUtils.expToGetter("$cucumberutils.getShortVarName(${this.mangle($name)})_$p.name()"+" "+left) +" "+ operator +" "+ CucumberUtils.expToGetter(right));
    Assert.assertTrue(result);
}


#end ## end of create parameterType



#set ($exps = $cucumberutils.getVarName("exps"))
#set ($values = $cucumberutils.getVarName("values"))
#if(!$name.contains("_result"))##
@ParameterType(".*")
 public String $exps (String $exps) throws Exception{
     return $exps;
 }
 @ParameterType(".*")
 public String $values (String $values) throws Exception{
        return $values;
 }
#end
#if($message.hasWhenDescription())
@When("$message.getWhenDescription()")
#else
#if(!$name.contains("_result"))##
@When("update $cucumberutils.getDefaultSentence(${this.mangle($name)})  arguments##
#else
@When("wait for result of  $cucumberutils.getDefaultSentence(${this.mangle($name)})##
#end
#if(!$name.contains("_result"))##
{$exps} with {$values}##
#end##
")
#end
public java.lang.Object[] ${this.mangle($name)}(##
#if(!$name.contains("_result"))
String $exps ,String $values##
#end
){
AtomicReference<Object[]> ref = new AtomicReference();
try {
    CountDownLatch lock = new CountDownLatch(1);
    new ListenerServiceImpl() {
        @Override
        public ${this.javaUnbox($response, true)} ${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
${this.javaUnbox($p.schema(), false)} $p.name()#if ($foreach.hasNext), #end
#end ##
) {
#if (${this.javaUnbox($response, true)} != "void" )
#foreach ($p in $message.getRequest().getFields())
        $cucumberutils.getShortVarName(${this.mangle($name)})_$p.name() = $p.name();
#end
        String[] _exps = ${exps}.split(",");
        String[] _values = ${values}.split(",");
        for(int i=0;i<_exps.length;i++){
            Object v = evulExp(_values[i]);
            setResult(_exps[i],v);
        }
        lock.countDown();
        return new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
$p.name()#if ($foreach.hasNext), #end
#end ##
};
         };
#else
#foreach ($p in $message.getRequest().getFields())##
        $cucumberutils.getShortVarName(${this.mangle($name)})_$p.name()  = $p.name() ;
#end##
        ref.set(new Object[]{##
#foreach ($p in $message.getRequest().getFields())##
$p.name()#if ($foreach.hasNext), #end
#end ##
});
        lock.countDown();
        }
#end
     };
    lock.await(10, TimeUnit.MINUTES);
}catch (Exception e){
   e.printStackTrace();
}
return ref.get();
}



#end
#end## (requests)
}## End of protocol interface
