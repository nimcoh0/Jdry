/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tests.infrastructure;
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import org.softauto.core.AsyncResult;
import org.softauto.core.Handler;
import org.softauto.core.Future;
import org.softauto.serializer.CallFuture;
import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;
import java.lang.reflect.Parameter;
import org.softauto.core.Utils;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import java.util.HashMap;
import org.softauto.espl.ExpressionBuilder;
import org.softauto.espl.EvulExp;
import org.softauto.core.IListener;

@org.apache.avro.specific.AvroGenerated
public class Listener {

    private static org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(Listener.class);
    public static long timeOutInMin = 1;
    static Map<String, Object> map = null;

    public static void setTimeOut(long min){
        timeOutInMin = min;
    }





public static class com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader implements IListener{
    private static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    javax.ws.rs.core.Response _result;
    static java.lang.String headerKey = null;
    static java.lang.String headerValue = null;

    public     java.lang.Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(java.lang.String headerKey, java.lang.String headerValue    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader args :"  +" headerKey:" + headerKey  +" headerValue:" + headerValue       );

       return new Object[]{                headerKey,                 headerValue            };
    }




    public void com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(javax.ws.rs.core.Response result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader args :javax.ws.rs.core.Response " + result);
     _result = result;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader waitUntil(ExpressionBuilder exp){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(java.lang.String headerKey, java.lang.String headerValue){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("headerKey", headerKey);
                        params.put("headerValue", headerValue);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey;
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{headerKey,headerValue};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(java.lang.String headerKey, java.lang.String headerValue){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("headerKey", headerKey);
                        params.put("headerValue", headerValue);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey;
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue});
                             lock.countDown();
                             return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{headerKey,headerValue});
                        return new Object[]{headerKey,headerValue};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(java.lang.String headerKey, java.lang.String headerValue){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("headerKey", headerKey);
                        params.put("headerValue", headerValue);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey;
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{headerKey,headerValue};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader waitTo(CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(java.lang.String headerKey, java.lang.String headerValue){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey;
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue});
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader waitTo(){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(java.lang.String headerKey, java.lang.String headerValue){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey;
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader waitTo(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
               // com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader();
                lock = new CountDownLatch(1);
                _waitTo = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(){
                     @Override
                     public Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(                        java.lang.String headerKey,                         java.lang.String headerValue){
                    try{
                        logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                        seen = true;
                        logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader seen:"+seen);
                         com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey;
                         com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                         lock.countDown();
                         return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader waitToResult(){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(javax.ws.rs.core.Response result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader waitToResult(CallFuture<javax.ws.rs.core.Response> future){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(javax.ws.rs.core.Response result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(){
                public void com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader(javax.ws.rs.core.Response result){
                try{
                   logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }



    public javax.ws.rs.core.Response get_Result()throws Exception{
        return _result;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader get_Result(Handler<AsyncResult<javax.ws.rs.core.Response>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader get_Result(CallFuture<javax.ws.rs.core.Response> future){
         future.handleResult(_result);
         return this;
    }




    public java.lang.String getHeaderKey()throws Exception{
        return com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader getHeaderKey(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey));
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader getHeaderKey(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey);
       return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader setHeaderKey(java.lang.String headerKey)throws Exception{
        com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerKey = headerKey;
        return this;
    }

    public java.lang.String getHeaderValue()throws Exception{
        return com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader getHeaderValue(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue));
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader getHeaderValue(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue);
       return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader setHeaderValue(java.lang.String headerValue)throws Exception{
        com_baeldung_jersey_client_JerseyClientHeaders_simpleHeader.headerValue = headerValue;
        return this;
    }





}


public static class com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently implements IListener{
    private static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    javax.ws.rs.core.Response _result;
    static java.lang.String headerKey = null;
    static java.lang.String headerValue = null;

    public     java.lang.Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(java.lang.String headerKey, java.lang.String headerValue    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently args :"  +" headerKey:" + headerKey  +" headerValue:" + headerValue       );

       return new Object[]{                headerKey,                 headerValue            };
    }




    public void com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(javax.ws.rs.core.Response result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently args :javax.ws.rs.core.Response " + result);
     _result = result;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently waitUntil(ExpressionBuilder exp){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(java.lang.String headerKey, java.lang.String headerValue){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("headerKey", headerKey);
                        params.put("headerValue", headerValue);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey;
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{headerKey,headerValue};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(java.lang.String headerKey, java.lang.String headerValue){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("headerKey", headerKey);
                        params.put("headerValue", headerValue);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey;
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue});
                             lock.countDown();
                             return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{headerKey,headerValue});
                        return new Object[]{headerKey,headerValue};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(java.lang.String headerKey, java.lang.String headerValue){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("headerKey", headerKey);
                        params.put("headerValue", headerValue);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey;
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{headerKey,headerValue};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently waitTo(CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(java.lang.String headerKey, java.lang.String headerValue){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey;
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue});
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently waitTo(){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(java.lang.String headerKey, java.lang.String headerValue){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey;
                            com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently waitTo(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
               // com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently();
                lock = new CountDownLatch(1);
                _waitTo = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(){
                     @Override
                     public Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(                        java.lang.String headerKey,                         java.lang.String headerValue){
                    try{
                        logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                        seen = true;
                        logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently seen:"+seen);
                         com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey == null ? headerKey : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey;
                         com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue = com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue == null ? headerValue : com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                         lock.countDown();
                         return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey,com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently waitToResult(){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(javax.ws.rs.core.Response result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently waitToResult(CallFuture<javax.ws.rs.core.Response> future){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(javax.ws.rs.core.Response result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(){
                public void com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently(javax.ws.rs.core.Response result){
                try{
                   logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }



    public javax.ws.rs.core.Response get_Result()throws Exception{
        return _result;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently get_Result(Handler<AsyncResult<javax.ws.rs.core.Response>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently get_Result(CallFuture<javax.ws.rs.core.Response> future){
         future.handleResult(_result);
         return this;
    }




    public java.lang.String getHeaderKey()throws Exception{
        return com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently getHeaderKey(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey));
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently getHeaderKey(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey);
       return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently setHeaderKey(java.lang.String headerKey)throws Exception{
        com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerKey = headerKey;
        return this;
    }

    public java.lang.String getHeaderValue()throws Exception{
        return com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently getHeaderValue(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue));
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently getHeaderValue(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue);
       return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently setHeaderValue(java.lang.String headerValue)throws Exception{
        com_baeldung_jersey_client_JerseyClientHeaders_simpleHeaderFluently.headerValue = headerValue;
        return this;
    }





}


public static class com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel implements IListener{
    private static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    javax.ws.rs.core.Response _result;
    static java.lang.String username = null;
    static java.lang.String password = null;

    public     java.lang.Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(java.lang.String username, java.lang.String password    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel args :"  +" username:" + username  +" password:" + password       );

       return new Object[]{                username,                 password            };
    }




    public void com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(javax.ws.rs.core.Response result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel args :javax.ws.rs.core.Response " + result);
     _result = result;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel waitUntil(ExpressionBuilder exp){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(java.lang.String username, java.lang.String password){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("username", username);
                        params.put("password", password);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username;
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{username,password};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(java.lang.String username, java.lang.String password){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("username", username);
                        params.put("password", password);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username;
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password});
                             lock.countDown();
                             return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{username,password});
                        return new Object[]{username,password};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(java.lang.String username, java.lang.String password){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("username", username);
                        params.put("password", password);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username;
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{username,password};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel waitTo(CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(java.lang.String username, java.lang.String password){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username;
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password});
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel waitTo(){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(java.lang.String username, java.lang.String password){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username;
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel waitTo(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
               // com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel();
                lock = new CountDownLatch(1);
                _waitTo = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(){
                     @Override
                     public Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(                        java.lang.String username,                         java.lang.String password){
                    try{
                        logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                        seen = true;
                        logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel seen:"+seen);
                         com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username;
                         com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                         lock.countDown();
                         return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel waitToResult(){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(javax.ws.rs.core.Response result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel waitToResult(CallFuture<javax.ws.rs.core.Response> future){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(javax.ws.rs.core.Response result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(){
                public void com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel(javax.ws.rs.core.Response result){
                try{
                   logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }



    public javax.ws.rs.core.Response get_Result()throws Exception{
        return _result;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel get_Result(Handler<AsyncResult<javax.ws.rs.core.Response>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel get_Result(CallFuture<javax.ws.rs.core.Response> future){
         future.handleResult(_result);
         return this;
    }




    public java.lang.String getUsername()throws Exception{
        return com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel getUsername(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username));
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel getUsername(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username);
       return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel setUsername(java.lang.String username)throws Exception{
        com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.username = username;
        return this;
    }

    public java.lang.String getPassword()throws Exception{
        return com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel getPassword(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password));
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel getPassword(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password);
       return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel setPassword(java.lang.String password)throws Exception{
        com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtClientLevel.password = password;
        return this;
    }





}


public static class com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel implements IListener{
    private static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    javax.ws.rs.core.Response _result;
    static java.lang.String username = null;
    static java.lang.String password = null;

    public     java.lang.Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(java.lang.String username, java.lang.String password    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel args :"  +" username:" + username  +" password:" + password       );

       return new Object[]{                username,                 password            };
    }




    public void com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(javax.ws.rs.core.Response result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel args :javax.ws.rs.core.Response " + result);
     _result = result;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel waitUntil(ExpressionBuilder exp){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(java.lang.String username, java.lang.String password){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("username", username);
                        params.put("password", password);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username;
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{username,password};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(java.lang.String username, java.lang.String password){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("username", username);
                        params.put("password", password);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username;
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password});
                             lock.countDown();
                             return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{username,password});
                        return new Object[]{username,password};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(java.lang.String username, java.lang.String password){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("username", username);
                        params.put("password", password);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username;
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{username,password};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel waitTo(CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(java.lang.String username, java.lang.String password){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username;
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password});
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel waitTo(){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(java.lang.String username, java.lang.String password){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username;
                            com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel waitTo(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
               // com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel();
                lock = new CountDownLatch(1);
                _waitTo = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(){
                     @Override
                     public Object[] com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(                        java.lang.String username,                         java.lang.String password){
                    try{
                        logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                        seen = true;
                        logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel seen:"+seen);
                         com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username == null ? username : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username;
                         com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password = com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password == null ? password : com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                         lock.countDown();
                         return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username,com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel waitToResult(){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(javax.ws.rs.core.Response result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel waitToResult(CallFuture<javax.ws.rs.core.Response> future){
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(javax.ws.rs.core.Response result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(){
                public void com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel(javax.ws.rs.core.Response result){
                try{
                   logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }



    public javax.ws.rs.core.Response get_Result()throws Exception{
        return _result;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel get_Result(Handler<AsyncResult<javax.ws.rs.core.Response>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel get_Result(CallFuture<javax.ws.rs.core.Response> future){
         future.handleResult(_result);
         return this;
    }




    public java.lang.String getUsername()throws Exception{
        return com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel getUsername(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username));
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel getUsername(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username);
       return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel setUsername(java.lang.String username)throws Exception{
        com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.username = username;
        return this;
    }

    public java.lang.String getPassword()throws Exception{
        return com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel getPassword(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password));
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel getPassword(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password);
       return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel setPassword(java.lang.String password)throws Exception{
        com_baeldung_jersey_client_JerseyClientHeaders_digestAuthenticationAtRequestLevel.password = password;
        return this;
    }





}


public static class com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel implements IListener{
    private static com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    javax.ws.rs.core.Response _result;
    static java.lang.String token = null;
    static java.lang.String consumerKey = null;

    public     java.lang.Object[] com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(java.lang.String token, java.lang.String consumerKey    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel args :"  +" token:" + token  +" consumerKey:" + consumerKey       );

       return new Object[]{                token,                 consumerKey            };
    }




    public void com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(javax.ws.rs.core.Response result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel args :javax.ws.rs.core.Response " + result);
     _result = result;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel waitUntil(ExpressionBuilder exp){
    com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(java.lang.String token, java.lang.String consumerKey){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("token", token);
                        params.put("consumerKey", consumerKey);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token == null ? token : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token;
                            com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey == null ? consumerKey : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token,com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{token,consumerKey};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(java.lang.String token, java.lang.String consumerKey){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("token", token);
                        params.put("consumerKey", consumerKey);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token == null ? token : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token;
                            com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey == null ? consumerKey : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token,com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey});
                             lock.countDown();
                             return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token,com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{token,consumerKey});
                        return new Object[]{token,consumerKey};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(java.lang.String token, java.lang.String consumerKey){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("token", token);
                        params.put("consumerKey", consumerKey);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token == null ? token : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token;
                            com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey == null ? consumerKey : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token,com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{token,consumerKey};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel waitTo(CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(java.lang.String token, java.lang.String consumerKey){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token == null ? token : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token;
                            com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey == null ? consumerKey : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token,com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey});
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token,com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel waitTo(){
    com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(java.lang.String token, java.lang.String consumerKey){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token == null ? token : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token;
                            com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey == null ? consumerKey : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token,com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel waitTo(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
               // com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel();
                lock = new CountDownLatch(1);
                _waitTo = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(){
                     @Override
                     public Object[] com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(                        java.lang.String token,                         java.lang.String consumerKey){
                    try{
                        logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                        seen = true;
                        logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel seen:"+seen);
                         com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token == null ? token : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token;
                         com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey = com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey == null ? consumerKey : com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                         lock.countDown();
                         return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token,com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel waitToResult(){
    com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(javax.ws.rs.core.Response result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel waitToResult(CallFuture<javax.ws.rs.core.Response> future){
    com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(javax.ws.rs.core.Response result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                //com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(){
                public void com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel(javax.ws.rs.core.Response result){
                try{
                   logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }



    public javax.ws.rs.core.Response get_Result()throws Exception{
        return _result;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel get_Result(Handler<AsyncResult<javax.ws.rs.core.Response>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel get_Result(CallFuture<javax.ws.rs.core.Response> future){
         future.handleResult(_result);
         return this;
    }




    public java.lang.String getToken()throws Exception{
        return com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel getToken(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token));
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel getToken(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token);
       return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel setToken(java.lang.String token)throws Exception{
        com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.token = token;
        return this;
    }

    public java.lang.String getConsumerKey()throws Exception{
        return com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel getConsumerKey(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey));
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel getConsumerKey(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey);
       return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel setConsumerKey(java.lang.String consumerKey)throws Exception{
        com_baeldung_jersey_client_JerseyClientHeaders_bearerAuthenticationWithOAuth1AtClientLevel.consumerKey = consumerKey;
        return this;
    }





}


public static class com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader implements IListener{
    private static com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    java.lang.String _result;

    public     java.lang.Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader args :"        );

       return new Object[]{            };
    }




    public void com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(java.lang.String result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader args :java.lang.String " + result);
     _result = result;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader waitUntil(ExpressionBuilder exp){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            lock.countDown();
                            return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            future.handleResult(new Object[]{});
                             lock.countDown();
                             return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            lock.countDown();
                            return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader waitTo(CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            future.handleResult(new Object[]{});
                            lock.countDown();
                            return new Object[]{};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader waitTo(){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            lock.countDown();
                            return new Object[]{            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader waitTo(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
               // com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader();
                lock = new CountDownLatch(1);
                _waitTo = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                     @Override
                     public Object[] com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                    try{
                        logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                        seen = true;
                        logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader seen:"+seen);
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                         lock.countDown();
                         return new Object[]{                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader waitToResult(){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(java.lang.String result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader waitToResult(CallFuture<java.lang.String> future){
    com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                        public void com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(java.lang.String result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader _waitToResult = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                //com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(){
                public void com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader(java.lang.String result){
                try{
                   logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }



    public java.lang.String get_Result()throws Exception{
        return _result;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader get_Result(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_simpleSSEHeader get_Result(CallFuture<java.lang.String> future){
         future.handleResult(_result);
         return this;
    }








}


public static class com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent implements IListener{
    private static com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    static javax.ws.rs.sse.InboundSseEvent event = null;

    public     java.lang.Object[] com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(javax.ws.rs.sse.InboundSseEvent event    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent args :"  +" event:" + event       );

       return new Object[]{                event            };
    }





    public static com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent waitUntil(ExpressionBuilder exp){
    com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                //com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent = new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(javax.ws.rs.sse.InboundSseEvent event){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("event", event);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event = com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event == null ? event : com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{event};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                //com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent = new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(javax.ws.rs.sse.InboundSseEvent event){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("event", event);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event = com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event == null ? event : com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event});
                             lock.countDown();
                             return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{event});
                        return new Object[]{event};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent _waitUntil = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                //com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent = new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(javax.ws.rs.sse.InboundSseEvent event){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("event", event);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event = com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event == null ? event : com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{event};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent waitTo(CallFuture<Object[]> future){
    com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                //com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent = new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(javax.ws.rs.sse.InboundSseEvent event){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event = com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event == null ? event : com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                            future.handleResult(new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event});
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent waitTo(){
    com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                //com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent = new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(){
                        @Override
                        public Object[] com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(javax.ws.rs.sse.InboundSseEvent event){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent seen:"+seen);
                            com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event = com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event == null ? event : com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent waitTo(Handler<AsyncResult<com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent>> resultHandler)throws Exception{
    com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent _waitTo = null;
    //if(com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
               // com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent = new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent();
                lock = new CountDownLatch(1);
                _waitTo = new com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(){
                     @Override
                     public Object[] com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent(                        javax.ws.rs.sse.InboundSseEvent event){
                    try{
                        logger.debug("done waiting for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                        seen = true;
                        logger.debug("got call for com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent seen:"+seen);
                         com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event = com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event == null ? event : com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                         lock.countDown();
                         return new Object[]{com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }




    public javax.ws.rs.sse.InboundSseEvent getEvent()throws Exception{
        return com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent getEvent(Handler<AsyncResult<javax.ws.rs.sse.InboundSseEvent>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event));
        return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent getEvent(CallFuture<javax.ws.rs.sse.InboundSseEvent> future)throws Exception{
       future.handleResult(com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event);
       return this;
    }

    public com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent setEvent(javax.ws.rs.sse.InboundSseEvent event)throws Exception{
        com_baeldung_jersey_client_JerseyClientHeaders_receiveEvent.event = event;
        return this;
    }





}


public static class com_baeldung_jersey_service_SimpleStorageService_storeFruit implements IListener{
    private static com_baeldung_jersey_service_SimpleStorageService_storeFruit com_baeldung_jersey_service_SimpleStorageService_storeFruit= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    static com.baeldung.jersey.server.model.Fruit fruit = null;

    public     java.lang.Object[] com_baeldung_jersey_service_SimpleStorageService_storeFruit(com.baeldung.jersey.server.model.Fruit fruit    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_service_SimpleStorageService_storeFruit args :"  +" fruit:" + fruit       );

       return new Object[]{                fruit            };
    }





    public static com_baeldung_jersey_service_SimpleStorageService_storeFruit waitUntil(ExpressionBuilder exp){
    com_baeldung_jersey_service_SimpleStorageService_storeFruit _waitUntil = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_storeFruit == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                //com_baeldung_jersey_service_SimpleStorageService_storeFruit = new com_baeldung_jersey_service_SimpleStorageService_storeFruit();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_service_SimpleStorageService_storeFruit(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_service_SimpleStorageService_storeFruit(com.baeldung.jersey.server.model.Fruit fruit){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("fruit", fruit);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_storeFruit seen:"+seen);
                            com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit = com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit == null ? fruit : com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{fruit};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_storeFruit", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static com_baeldung_jersey_service_SimpleStorageService_storeFruit waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    com_baeldung_jersey_service_SimpleStorageService_storeFruit _waitUntil = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_storeFruit == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                //com_baeldung_jersey_service_SimpleStorageService_storeFruit = new com_baeldung_jersey_service_SimpleStorageService_storeFruit();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_service_SimpleStorageService_storeFruit(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_service_SimpleStorageService_storeFruit(com.baeldung.jersey.server.model.Fruit fruit){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("fruit", fruit);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_storeFruit seen:"+seen);
                            com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit = com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit == null ? fruit : com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                            future.handleResult(new Object[]{com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit});
                             lock.countDown();
                             return new Object[]{com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{fruit});
                        return new Object[]{fruit};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_storeFruit", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<com_baeldung_jersey_service_SimpleStorageService_storeFruit>> resultHandler)throws Exception{
    com_baeldung_jersey_service_SimpleStorageService_storeFruit _waitUntil = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_storeFruit == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                //com_baeldung_jersey_service_SimpleStorageService_storeFruit = new com_baeldung_jersey_service_SimpleStorageService_storeFruit();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_service_SimpleStorageService_storeFruit(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_service_SimpleStorageService_storeFruit(com.baeldung.jersey.server.model.Fruit fruit){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("fruit", fruit);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_storeFruit seen:"+seen);
                            com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit = com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit == null ? fruit : com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{fruit};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_storeFruit", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static com_baeldung_jersey_service_SimpleStorageService_storeFruit waitTo(CallFuture<Object[]> future){
    com_baeldung_jersey_service_SimpleStorageService_storeFruit _waitTo = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_storeFruit == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                //com_baeldung_jersey_service_SimpleStorageService_storeFruit = new com_baeldung_jersey_service_SimpleStorageService_storeFruit();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_service_SimpleStorageService_storeFruit(){
                        @Override
                        public Object[] com_baeldung_jersey_service_SimpleStorageService_storeFruit(com.baeldung.jersey.server.model.Fruit fruit){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_storeFruit seen:"+seen);
                            com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit = com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit == null ? fruit : com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                            future.handleResult(new Object[]{com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit});
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_storeFruit", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_service_SimpleStorageService_storeFruit waitTo(){
    com_baeldung_jersey_service_SimpleStorageService_storeFruit _waitTo = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_storeFruit == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                //com_baeldung_jersey_service_SimpleStorageService_storeFruit = new com_baeldung_jersey_service_SimpleStorageService_storeFruit();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_service_SimpleStorageService_storeFruit(){
                        @Override
                        public Object[] com_baeldung_jersey_service_SimpleStorageService_storeFruit(com.baeldung.jersey.server.model.Fruit fruit){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_storeFruit seen:"+seen);
                            com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit = com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit == null ? fruit : com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_storeFruit", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_service_SimpleStorageService_storeFruit waitTo(Handler<AsyncResult<com_baeldung_jersey_service_SimpleStorageService_storeFruit>> resultHandler)throws Exception{
    com_baeldung_jersey_service_SimpleStorageService_storeFruit _waitTo = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_storeFruit == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
               // com_baeldung_jersey_service_SimpleStorageService_storeFruit = new com_baeldung_jersey_service_SimpleStorageService_storeFruit();
                lock = new CountDownLatch(1);
                _waitTo = new com_baeldung_jersey_service_SimpleStorageService_storeFruit(){
                     @Override
                     public Object[] com_baeldung_jersey_service_SimpleStorageService_storeFruit(                        com.baeldung.jersey.server.model.Fruit fruit){
                    try{
                        logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                        seen = true;
                        logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_storeFruit seen:"+seen);
                         com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit = com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit == null ? fruit : com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                         lock.countDown();
                         return new Object[]{com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_storeFruit", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_storeFruit");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }




    public com.baeldung.jersey.server.model.Fruit getFruit()throws Exception{
        return com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit;
    }

    public com_baeldung_jersey_service_SimpleStorageService_storeFruit getFruit(Handler<AsyncResult<com.baeldung.jersey.server.model.Fruit>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit));
        return this;
    }

    public com_baeldung_jersey_service_SimpleStorageService_storeFruit getFruit(CallFuture<com.baeldung.jersey.server.model.Fruit> future)throws Exception{
       future.handleResult(com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit);
       return this;
    }

    public com_baeldung_jersey_service_SimpleStorageService_storeFruit setFruit(com.baeldung.jersey.server.model.Fruit fruit)throws Exception{
        com_baeldung_jersey_service_SimpleStorageService_storeFruit.fruit = fruit;
        return this;
    }





}


public static class com_baeldung_jersey_service_SimpleStorageService_findByName implements IListener{
    private static com_baeldung_jersey_service_SimpleStorageService_findByName com_baeldung_jersey_service_SimpleStorageService_findByName= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    com.baeldung.jersey.server.model.Fruit _result;
    static java.lang.String name = null;

    public     java.lang.Object[] com_baeldung_jersey_service_SimpleStorageService_findByName(java.lang.String name    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_service_SimpleStorageService_findByName args :"  +" name:" + name       );

       return new Object[]{                name            };
    }




    public void com_baeldung_jersey_service_SimpleStorageService_findByName(com.baeldung.jersey.server.model.Fruit result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_service_SimpleStorageService_findByName args :com.baeldung.jersey.server.model.Fruit " + result);
     _result = result;
    }


    public static com_baeldung_jersey_service_SimpleStorageService_findByName waitUntil(ExpressionBuilder exp){
    com_baeldung_jersey_service_SimpleStorageService_findByName _waitUntil = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_findByName == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                //com_baeldung_jersey_service_SimpleStorageService_findByName = new com_baeldung_jersey_service_SimpleStorageService_findByName();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_service_SimpleStorageService_findByName(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_service_SimpleStorageService_findByName(java.lang.String name){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("name", name);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_findByName seen:"+seen);
                            com_baeldung_jersey_service_SimpleStorageService_findByName.name = com_baeldung_jersey_service_SimpleStorageService_findByName.name == null ? name : com_baeldung_jersey_service_SimpleStorageService_findByName.name;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_findByName");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_service_SimpleStorageService_findByName.name};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{name};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_findByName", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_findByName");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static com_baeldung_jersey_service_SimpleStorageService_findByName waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    com_baeldung_jersey_service_SimpleStorageService_findByName _waitUntil = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_findByName == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                //com_baeldung_jersey_service_SimpleStorageService_findByName = new com_baeldung_jersey_service_SimpleStorageService_findByName();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_service_SimpleStorageService_findByName(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_service_SimpleStorageService_findByName(java.lang.String name){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("name", name);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_findByName seen:"+seen);
                            com_baeldung_jersey_service_SimpleStorageService_findByName.name = com_baeldung_jersey_service_SimpleStorageService_findByName.name == null ? name : com_baeldung_jersey_service_SimpleStorageService_findByName.name;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_findByName");
                            future.handleResult(new Object[]{com_baeldung_jersey_service_SimpleStorageService_findByName.name});
                             lock.countDown();
                             return new Object[]{com_baeldung_jersey_service_SimpleStorageService_findByName.name};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{name});
                        return new Object[]{name};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_findByName", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_findByName");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<com_baeldung_jersey_service_SimpleStorageService_findByName>> resultHandler)throws Exception{
    com_baeldung_jersey_service_SimpleStorageService_findByName _waitUntil = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_findByName == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                //com_baeldung_jersey_service_SimpleStorageService_findByName = new com_baeldung_jersey_service_SimpleStorageService_findByName();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_service_SimpleStorageService_findByName(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_service_SimpleStorageService_findByName(java.lang.String name){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("name", name);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_findByName seen:"+seen);
                            com_baeldung_jersey_service_SimpleStorageService_findByName.name = com_baeldung_jersey_service_SimpleStorageService_findByName.name == null ? name : com_baeldung_jersey_service_SimpleStorageService_findByName.name;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_findByName");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_service_SimpleStorageService_findByName.name};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{name};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_findByName", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_findByName");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static com_baeldung_jersey_service_SimpleStorageService_findByName waitTo(CallFuture<Object[]> future){
    com_baeldung_jersey_service_SimpleStorageService_findByName _waitTo = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_findByName == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                //com_baeldung_jersey_service_SimpleStorageService_findByName = new com_baeldung_jersey_service_SimpleStorageService_findByName();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_service_SimpleStorageService_findByName(){
                        @Override
                        public Object[] com_baeldung_jersey_service_SimpleStorageService_findByName(java.lang.String name){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_findByName seen:"+seen);
                            com_baeldung_jersey_service_SimpleStorageService_findByName.name = com_baeldung_jersey_service_SimpleStorageService_findByName.name == null ? name : com_baeldung_jersey_service_SimpleStorageService_findByName.name;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_findByName");
                            future.handleResult(new Object[]{com_baeldung_jersey_service_SimpleStorageService_findByName.name});
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_service_SimpleStorageService_findByName.name};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_findByName", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_findByName");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_service_SimpleStorageService_findByName waitTo(){
    com_baeldung_jersey_service_SimpleStorageService_findByName _waitTo = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_findByName == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                //com_baeldung_jersey_service_SimpleStorageService_findByName = new com_baeldung_jersey_service_SimpleStorageService_findByName();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_service_SimpleStorageService_findByName(){
                        @Override
                        public Object[] com_baeldung_jersey_service_SimpleStorageService_findByName(java.lang.String name){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_findByName seen:"+seen);
                            com_baeldung_jersey_service_SimpleStorageService_findByName.name = com_baeldung_jersey_service_SimpleStorageService_findByName.name == null ? name : com_baeldung_jersey_service_SimpleStorageService_findByName.name;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_findByName");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_service_SimpleStorageService_findByName.name            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_findByName", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_findByName");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_service_SimpleStorageService_findByName waitTo(Handler<AsyncResult<com_baeldung_jersey_service_SimpleStorageService_findByName>> resultHandler)throws Exception{
    com_baeldung_jersey_service_SimpleStorageService_findByName _waitTo = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_findByName == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
               // com_baeldung_jersey_service_SimpleStorageService_findByName = new com_baeldung_jersey_service_SimpleStorageService_findByName();
                lock = new CountDownLatch(1);
                _waitTo = new com_baeldung_jersey_service_SimpleStorageService_findByName(){
                     @Override
                     public Object[] com_baeldung_jersey_service_SimpleStorageService_findByName(                        java.lang.String name){
                    try{
                        logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                        seen = true;
                        logger.debug("got call for com_baeldung_jersey_service_SimpleStorageService_findByName seen:"+seen);
                         com_baeldung_jersey_service_SimpleStorageService_findByName.name = com_baeldung_jersey_service_SimpleStorageService_findByName.name == null ? name : com_baeldung_jersey_service_SimpleStorageService_findByName.name;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_findByName");
                         lock.countDown();
                         return new Object[]{com_baeldung_jersey_service_SimpleStorageService_findByName.name                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_findByName", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_findByName");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }


    public static com_baeldung_jersey_service_SimpleStorageService_findByName waitToResult(){
    com_baeldung_jersey_service_SimpleStorageService_findByName _waitToResult = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_findByName == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_service_SimpleStorageService_findByName");
                //com_baeldung_jersey_service_SimpleStorageService_findByName = new com_baeldung_jersey_service_SimpleStorageService_findByName();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_service_SimpleStorageService_findByName(){
                        public void com_baeldung_jersey_service_SimpleStorageService_findByName(com.baeldung.jersey.server.model.Fruit result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_findByName");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_findByName", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_findByName");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static com_baeldung_jersey_service_SimpleStorageService_findByName waitToResult(CallFuture<com.baeldung.jersey.server.model.Fruit> future){
    com_baeldung_jersey_service_SimpleStorageService_findByName _waitToResult = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_findByName == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_service_SimpleStorageService_findByName");
                //com_baeldung_jersey_service_SimpleStorageService_findByName = new com_baeldung_jersey_service_SimpleStorageService_findByName();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_service_SimpleStorageService_findByName(){
                        public void com_baeldung_jersey_service_SimpleStorageService_findByName(com.baeldung.jersey.server.model.Fruit result){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_findByName");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_findByName", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_findByName");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<com_baeldung_jersey_service_SimpleStorageService_findByName>> resultHandler)throws Exception{
    com_baeldung_jersey_service_SimpleStorageService_findByName _waitToResult = null;
    //if(com_baeldung_jersey_service_SimpleStorageService_findByName == null){
            try{
                logger.debug("waiting for result of com_baeldung_jersey_service_SimpleStorageService_findByName");
                //com_baeldung_jersey_service_SimpleStorageService_findByName = new com_baeldung_jersey_service_SimpleStorageService_findByName();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new com_baeldung_jersey_service_SimpleStorageService_findByName(){
                public void com_baeldung_jersey_service_SimpleStorageService_findByName(com.baeldung.jersey.server.model.Fruit result){
                try{
                   logger.debug("done waiting for com_baeldung_jersey_service_SimpleStorageService_findByName");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_service_SimpleStorageService_findByName");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_service_SimpleStorageService_findByName", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_service_SimpleStorageService_findByName");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }



    public com.baeldung.jersey.server.model.Fruit get_Result()throws Exception{
        return _result;
    }

    public com_baeldung_jersey_service_SimpleStorageService_findByName get_Result(Handler<AsyncResult<com.baeldung.jersey.server.model.Fruit>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public com_baeldung_jersey_service_SimpleStorageService_findByName get_Result(CallFuture<com.baeldung.jersey.server.model.Fruit> future){
         future.handleResult(_result);
         return this;
    }




    public java.lang.String getName()throws Exception{
        return com_baeldung_jersey_service_SimpleStorageService_findByName.name;
    }

    public com_baeldung_jersey_service_SimpleStorageService_findByName getName(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_service_SimpleStorageService_findByName.name));
        return this;
    }

    public com_baeldung_jersey_service_SimpleStorageService_findByName getName(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_jersey_service_SimpleStorageService_findByName.name);
       return this;
    }

    public com_baeldung_jersey_service_SimpleStorageService_findByName setName(java.lang.String name)throws Exception{
        com_baeldung_jersey_service_SimpleStorageService_findByName.name = name;
        return this;
    }





}


public static class com_baeldung_jersey_server_config_HelloDynamicBinding_configure implements IListener{
    private static com_baeldung_jersey_server_config_HelloDynamicBinding_configure com_baeldung_jersey_server_config_HelloDynamicBinding_configure= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    static javax.ws.rs.container.ResourceInfo resourceInfo = null;
    static javax.ws.rs.core.FeatureContext context = null;

    public     java.lang.Object[] com_baeldung_jersey_server_config_HelloDynamicBinding_configure(javax.ws.rs.container.ResourceInfo resourceInfo, javax.ws.rs.core.FeatureContext context    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_jersey_server_config_HelloDynamicBinding_configure args :"  +" resourceInfo:" + resourceInfo  +" context:" + context       );

       return new Object[]{                resourceInfo,                 context            };
    }





    public static com_baeldung_jersey_server_config_HelloDynamicBinding_configure waitUntil(ExpressionBuilder exp){
    com_baeldung_jersey_server_config_HelloDynamicBinding_configure _waitUntil = null;
    //if(com_baeldung_jersey_server_config_HelloDynamicBinding_configure == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                //com_baeldung_jersey_server_config_HelloDynamicBinding_configure = new com_baeldung_jersey_server_config_HelloDynamicBinding_configure();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_server_config_HelloDynamicBinding_configure(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_server_config_HelloDynamicBinding_configure(javax.ws.rs.container.ResourceInfo resourceInfo, javax.ws.rs.core.FeatureContext context){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("resourceInfo", resourceInfo);
                        params.put("context", context);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_server_config_HelloDynamicBinding_configure seen:"+seen);
                            com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo == null ? resourceInfo : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo;
                            com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context == null ? context : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo,com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{resourceInfo,context};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_server_config_HelloDynamicBinding_configure", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static com_baeldung_jersey_server_config_HelloDynamicBinding_configure waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    com_baeldung_jersey_server_config_HelloDynamicBinding_configure _waitUntil = null;
    //if(com_baeldung_jersey_server_config_HelloDynamicBinding_configure == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                //com_baeldung_jersey_server_config_HelloDynamicBinding_configure = new com_baeldung_jersey_server_config_HelloDynamicBinding_configure();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_server_config_HelloDynamicBinding_configure(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_server_config_HelloDynamicBinding_configure(javax.ws.rs.container.ResourceInfo resourceInfo, javax.ws.rs.core.FeatureContext context){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("resourceInfo", resourceInfo);
                        params.put("context", context);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_server_config_HelloDynamicBinding_configure seen:"+seen);
                            com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo == null ? resourceInfo : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo;
                            com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context == null ? context : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                            future.handleResult(new Object[]{com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo,com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context});
                             lock.countDown();
                             return new Object[]{com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo,com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{resourceInfo,context});
                        return new Object[]{resourceInfo,context};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_server_config_HelloDynamicBinding_configure", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<com_baeldung_jersey_server_config_HelloDynamicBinding_configure>> resultHandler)throws Exception{
    com_baeldung_jersey_server_config_HelloDynamicBinding_configure _waitUntil = null;
    //if(com_baeldung_jersey_server_config_HelloDynamicBinding_configure == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                //com_baeldung_jersey_server_config_HelloDynamicBinding_configure = new com_baeldung_jersey_server_config_HelloDynamicBinding_configure();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_jersey_server_config_HelloDynamicBinding_configure(){
                        @Override
                        public synchronized Object[] com_baeldung_jersey_server_config_HelloDynamicBinding_configure(javax.ws.rs.container.ResourceInfo resourceInfo, javax.ws.rs.core.FeatureContext context){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(2);
                        params.put("resourceInfo", resourceInfo);
                        params.put("context", context);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_server_config_HelloDynamicBinding_configure seen:"+seen);
                            com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo == null ? resourceInfo : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo;
                            com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context == null ? context : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo,com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{resourceInfo,context};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_server_config_HelloDynamicBinding_configure", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static com_baeldung_jersey_server_config_HelloDynamicBinding_configure waitTo(CallFuture<Object[]> future){
    com_baeldung_jersey_server_config_HelloDynamicBinding_configure _waitTo = null;
    //if(com_baeldung_jersey_server_config_HelloDynamicBinding_configure == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                //com_baeldung_jersey_server_config_HelloDynamicBinding_configure = new com_baeldung_jersey_server_config_HelloDynamicBinding_configure();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_server_config_HelloDynamicBinding_configure(){
                        @Override
                        public Object[] com_baeldung_jersey_server_config_HelloDynamicBinding_configure(javax.ws.rs.container.ResourceInfo resourceInfo, javax.ws.rs.core.FeatureContext context){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_server_config_HelloDynamicBinding_configure seen:"+seen);
                            com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo == null ? resourceInfo : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo;
                            com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context == null ? context : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                            future.handleResult(new Object[]{com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo,com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context});
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo,com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_server_config_HelloDynamicBinding_configure", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_server_config_HelloDynamicBinding_configure waitTo(){
    com_baeldung_jersey_server_config_HelloDynamicBinding_configure _waitTo = null;
    //if(com_baeldung_jersey_server_config_HelloDynamicBinding_configure == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                //com_baeldung_jersey_server_config_HelloDynamicBinding_configure = new com_baeldung_jersey_server_config_HelloDynamicBinding_configure();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_jersey_server_config_HelloDynamicBinding_configure(){
                        @Override
                        public Object[] com_baeldung_jersey_server_config_HelloDynamicBinding_configure(javax.ws.rs.container.ResourceInfo resourceInfo, javax.ws.rs.core.FeatureContext context){
                        try{
                            logger.debug("done waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                            seen = true;
                            logger.debug("got call for com_baeldung_jersey_server_config_HelloDynamicBinding_configure seen:"+seen);
                            com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo == null ? resourceInfo : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo;
                            com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context == null ? context : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                            lock.countDown();
                            return new Object[]{com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo,com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_server_config_HelloDynamicBinding_configure", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_jersey_server_config_HelloDynamicBinding_configure waitTo(Handler<AsyncResult<com_baeldung_jersey_server_config_HelloDynamicBinding_configure>> resultHandler)throws Exception{
    com_baeldung_jersey_server_config_HelloDynamicBinding_configure _waitTo = null;
    //if(com_baeldung_jersey_server_config_HelloDynamicBinding_configure == null){
            try{
                logger.debug("waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
               // com_baeldung_jersey_server_config_HelloDynamicBinding_configure = new com_baeldung_jersey_server_config_HelloDynamicBinding_configure();
                lock = new CountDownLatch(1);
                _waitTo = new com_baeldung_jersey_server_config_HelloDynamicBinding_configure(){
                     @Override
                     public Object[] com_baeldung_jersey_server_config_HelloDynamicBinding_configure(                        javax.ws.rs.container.ResourceInfo resourceInfo,                         javax.ws.rs.core.FeatureContext context){
                    try{
                        logger.debug("done waiting for com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                        seen = true;
                        logger.debug("got call for com_baeldung_jersey_server_config_HelloDynamicBinding_configure seen:"+seen);
                         com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo == null ? resourceInfo : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo;
                         com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context = com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context == null ? context : com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                         lock.countDown();
                         return new Object[]{com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo,com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_jersey_server_config_HelloDynamicBinding_configure", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_jersey_server_config_HelloDynamicBinding_configure");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }




    public javax.ws.rs.container.ResourceInfo getResourceInfo()throws Exception{
        return com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo;
    }

    public com_baeldung_jersey_server_config_HelloDynamicBinding_configure getResourceInfo(Handler<AsyncResult<javax.ws.rs.container.ResourceInfo>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo));
        return this;
    }

    public com_baeldung_jersey_server_config_HelloDynamicBinding_configure getResourceInfo(CallFuture<javax.ws.rs.container.ResourceInfo> future)throws Exception{
       future.handleResult(com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo);
       return this;
    }

    public com_baeldung_jersey_server_config_HelloDynamicBinding_configure setResourceInfo(javax.ws.rs.container.ResourceInfo resourceInfo)throws Exception{
        com_baeldung_jersey_server_config_HelloDynamicBinding_configure.resourceInfo = resourceInfo;
        return this;
    }

    public javax.ws.rs.core.FeatureContext getContext()throws Exception{
        return com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context;
    }

    public com_baeldung_jersey_server_config_HelloDynamicBinding_configure getContext(Handler<AsyncResult<javax.ws.rs.core.FeatureContext>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context));
        return this;
    }

    public com_baeldung_jersey_server_config_HelloDynamicBinding_configure getContext(CallFuture<javax.ws.rs.core.FeatureContext> future)throws Exception{
       future.handleResult(com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context);
       return this;
    }

    public com_baeldung_jersey_server_config_HelloDynamicBinding_configure setContext(javax.ws.rs.core.FeatureContext context)throws Exception{
        com_baeldung_jersey_server_config_HelloDynamicBinding_configure.context = context;
        return this;
    }





}

}