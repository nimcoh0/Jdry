/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tests.infrastructure;
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import org.softauto.core.AsyncResult;
import org.softauto.core.Handler;
import org.softauto.core.Future;
import org.softauto.serializer.CallFuture;
import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;
import java.lang.reflect.Parameter;
import org.softauto.core.Utils;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import java.util.HashMap;
import org.softauto.espl.ExpressionBuilder;
import org.softauto.espl.EvulExp;
import org.softauto.core.IListener;

@org.apache.avro.specific.AvroGenerated
public class Listener {

    private static org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(Listener.class);
    public static long timeOutInMin = 1;
    static Map<String, Object> map = null;

    public static void setTimeOut(long min){
        timeOutInMin = min;
    }





public static class app_example_books_BookCatalog_addBook implements IListener{
    private static app_example_books_BookCatalog_addBook app_example_books_BookCatalog_addBook= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    static app.example.books.Book book = null;

    public     java.lang.Object[] app_example_books_BookCatalog_addBook(app.example.books.Book book    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_BookCatalog_addBook args :"  +" book:" + book       );

       return new Object[]{                book            };
    }


    public static app_example_books_BookCatalog_addBook waitUntil(ExpressionBuilder exp){
    app_example_books_BookCatalog_addBook _waitUntil = null;
    //if(app_example_books_BookCatalog_addBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_addBook");
                //app_example_books_BookCatalog_addBook = new app_example_books_BookCatalog_addBook();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_BookCatalog_addBook(){
                        @Override
                        public synchronized Object[] app_example_books_BookCatalog_addBook(app.example.books.Book book){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("book", book);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_BookCatalog_addBook");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_addBook seen:"+seen);
                            app_example_books_BookCatalog_addBook.book = app_example_books_BookCatalog_addBook.book == null ? book : app_example_books_BookCatalog_addBook.book;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_addBook");
                            lock.countDown();
                            return new Object[]{app_example_books_BookCatalog_addBook.book};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{book};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_addBook", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_addBook");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static app_example_books_BookCatalog_addBook waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    app_example_books_BookCatalog_addBook _waitUntil = null;
    //if(app_example_books_BookCatalog_addBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_addBook");
                //app_example_books_BookCatalog_addBook = new app_example_books_BookCatalog_addBook();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_BookCatalog_addBook(){
                        @Override
                        public synchronized Object[] app_example_books_BookCatalog_addBook(app.example.books.Book book){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("book", book);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_BookCatalog_addBook");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_addBook seen:"+seen);
                            app_example_books_BookCatalog_addBook.book = app_example_books_BookCatalog_addBook.book == null ? book : app_example_books_BookCatalog_addBook.book;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_addBook");
                            future.handleResult(new Object[]{app_example_books_BookCatalog_addBook.book});
                             lock.countDown();
                             return new Object[]{app_example_books_BookCatalog_addBook.book};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{book});
                        return new Object[]{book};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_addBook", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_addBook");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<app_example_books_BookCatalog_addBook>> resultHandler)throws Exception{
    app_example_books_BookCatalog_addBook _waitUntil = null;
    //if(app_example_books_BookCatalog_addBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_addBook");
                //app_example_books_BookCatalog_addBook = new app_example_books_BookCatalog_addBook();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_BookCatalog_addBook(){
                        @Override
                        public synchronized Object[] app_example_books_BookCatalog_addBook(app.example.books.Book book){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("book", book);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_BookCatalog_addBook");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_addBook seen:"+seen);
                            app_example_books_BookCatalog_addBook.book = app_example_books_BookCatalog_addBook.book == null ? book : app_example_books_BookCatalog_addBook.book;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_addBook");
                            lock.countDown();
                            return new Object[]{app_example_books_BookCatalog_addBook.book};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{book};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_addBook", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_addBook");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static app_example_books_BookCatalog_addBook waitTo(CallFuture<Object[]> future){
    app_example_books_BookCatalog_addBook _waitTo = null;
    //if(app_example_books_BookCatalog_addBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_addBook");
                //app_example_books_BookCatalog_addBook = new app_example_books_BookCatalog_addBook();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_BookCatalog_addBook(){
                        @Override
                        public Object[] app_example_books_BookCatalog_addBook(app.example.books.Book book){
                        try{
                            logger.debug("done waiting for app_example_books_BookCatalog_addBook");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_addBook seen:"+seen);
                            app_example_books_BookCatalog_addBook.book = app_example_books_BookCatalog_addBook.book == null ? book : app_example_books_BookCatalog_addBook.book;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_addBook");
                            future.handleResult(new Object[]{app_example_books_BookCatalog_addBook.book});
                            lock.countDown();
                            return new Object[]{app_example_books_BookCatalog_addBook.book};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_addBook", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_addBook");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static app_example_books_BookCatalog_addBook waitTo(){
    app_example_books_BookCatalog_addBook _waitTo = null;
    //if(app_example_books_BookCatalog_addBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_addBook");
                //app_example_books_BookCatalog_addBook = new app_example_books_BookCatalog_addBook();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_BookCatalog_addBook(){
                        @Override
                        public Object[] app_example_books_BookCatalog_addBook(app.example.books.Book book){
                        try{
                            logger.debug("done waiting for app_example_books_BookCatalog_addBook");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_addBook seen:"+seen);
                            app_example_books_BookCatalog_addBook.book = app_example_books_BookCatalog_addBook.book == null ? book : app_example_books_BookCatalog_addBook.book;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_addBook");
                            lock.countDown();
                            return new Object[]{app_example_books_BookCatalog_addBook.book            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_addBook", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_addBook");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static void waitTo(Handler<AsyncResult<app_example_books_BookCatalog_addBook>> resultHandler)throws Exception{
    app_example_books_BookCatalog_addBook _waitTo = null;
    //if(app_example_books_BookCatalog_addBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_addBook");
               // app_example_books_BookCatalog_addBook = new app_example_books_BookCatalog_addBook();
                lock = new CountDownLatch(1);
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                _waitTo = new app_example_books_BookCatalog_addBook(){
                     @Override
                     public Object[] app_example_books_BookCatalog_addBook(                        app.example.books.Book book){
                    try{
                        logger.debug("done waiting for app_example_books_BookCatalog_addBook");
                        seen = true;
                        logger.debug("got call for app_example_books_BookCatalog_addBook seen:"+seen);
                         app_example_books_BookCatalog_addBook.book = app_example_books_BookCatalog_addBook.book == null ? book : app_example_books_BookCatalog_addBook.book;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_addBook");
                         lock.countDown();
                         return new Object[]{app_example_books_BookCatalog_addBook.book                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_addBook", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_addBook");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}

    }




    public app.example.books.Book getBook()throws Exception{
        return app_example_books_BookCatalog_addBook.book;
    }

    public app_example_books_BookCatalog_addBook getBook(Handler<AsyncResult<app.example.books.Book>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(app_example_books_BookCatalog_addBook.book));
        return this;
    }

    public app_example_books_BookCatalog_addBook getBook(CallFuture<app.example.books.Book> future)throws Exception{
       future.handleResult(app_example_books_BookCatalog_addBook.book);
       return this;
    }

    public app_example_books_BookCatalog_addBook setBook(app.example.books.Book book)throws Exception{
        app_example_books_BookCatalog_addBook.book = book;
        return this;
    }





}


public static class app_example_books_BookCatalog_getBooks implements IListener{
    private static app_example_books_BookCatalog_getBooks app_example_books_BookCatalog_getBooks= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    java.util.List<app.example.books.Book> _result;

    public     java.lang.Object[] app_example_books_BookCatalog_getBooks(    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_BookCatalog_getBooks args :"        );

       return new Object[]{            };
    }

    public void app_example_books_BookCatalog_getBooks(java.util.List<app.example.books.Book> result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_BookCatalog_getBooks args :java.util.List<app.example.books.Book> " + result);
     _result = result;
    }

    public static app_example_books_BookCatalog_getBooks waitUntil(ExpressionBuilder exp){
    app_example_books_BookCatalog_getBooks _waitUntil = null;
    //if(app_example_books_BookCatalog_getBooks == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_getBooks");
                //app_example_books_BookCatalog_getBooks = new app_example_books_BookCatalog_getBooks();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_BookCatalog_getBooks(){
                        @Override
                        public synchronized Object[] app_example_books_BookCatalog_getBooks(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_BookCatalog_getBooks");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_getBooks seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_getBooks");
                            lock.countDown();
                            return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_getBooks", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_getBooks");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static app_example_books_BookCatalog_getBooks waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    app_example_books_BookCatalog_getBooks _waitUntil = null;
    //if(app_example_books_BookCatalog_getBooks == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_getBooks");
                //app_example_books_BookCatalog_getBooks = new app_example_books_BookCatalog_getBooks();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_BookCatalog_getBooks(){
                        @Override
                        public synchronized Object[] app_example_books_BookCatalog_getBooks(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_BookCatalog_getBooks");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_getBooks seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_getBooks");
                            future.handleResult(new Object[]{});
                             lock.countDown();
                             return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_getBooks", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_getBooks");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<app_example_books_BookCatalog_getBooks>> resultHandler)throws Exception{
    app_example_books_BookCatalog_getBooks _waitUntil = null;
    //if(app_example_books_BookCatalog_getBooks == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_getBooks");
                //app_example_books_BookCatalog_getBooks = new app_example_books_BookCatalog_getBooks();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_BookCatalog_getBooks(){
                        @Override
                        public synchronized Object[] app_example_books_BookCatalog_getBooks(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_BookCatalog_getBooks");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_getBooks seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_getBooks");
                            lock.countDown();
                            return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_getBooks", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_getBooks");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static app_example_books_BookCatalog_getBooks waitTo(CallFuture<Object[]> future){
    app_example_books_BookCatalog_getBooks _waitTo = null;
    //if(app_example_books_BookCatalog_getBooks == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_getBooks");
                //app_example_books_BookCatalog_getBooks = new app_example_books_BookCatalog_getBooks();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_BookCatalog_getBooks(){
                        @Override
                        public Object[] app_example_books_BookCatalog_getBooks(){
                        try{
                            logger.debug("done waiting for app_example_books_BookCatalog_getBooks");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_getBooks seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_getBooks");
                            future.handleResult(new Object[]{});
                            lock.countDown();
                            return new Object[]{};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_getBooks", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_getBooks");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static app_example_books_BookCatalog_getBooks waitTo(){
    app_example_books_BookCatalog_getBooks _waitTo = null;
    //if(app_example_books_BookCatalog_getBooks == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_getBooks");
                //app_example_books_BookCatalog_getBooks = new app_example_books_BookCatalog_getBooks();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_BookCatalog_getBooks(){
                        @Override
                        public Object[] app_example_books_BookCatalog_getBooks(){
                        try{
                            logger.debug("done waiting for app_example_books_BookCatalog_getBooks");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_getBooks seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_getBooks");
                            lock.countDown();
                            return new Object[]{            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_getBooks", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_getBooks");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static void waitTo(Handler<AsyncResult<app_example_books_BookCatalog_getBooks>> resultHandler)throws Exception{
    app_example_books_BookCatalog_getBooks _waitTo = null;
    //if(app_example_books_BookCatalog_getBooks == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_getBooks");
               // app_example_books_BookCatalog_getBooks = new app_example_books_BookCatalog_getBooks();
                lock = new CountDownLatch(1);
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                _waitTo = new app_example_books_BookCatalog_getBooks(){
                     @Override
                     public Object[] app_example_books_BookCatalog_getBooks(){
                    try{
                        logger.debug("done waiting for app_example_books_BookCatalog_getBooks");
                        seen = true;
                        logger.debug("got call for app_example_books_BookCatalog_getBooks seen:"+seen);
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_getBooks");
                         lock.countDown();
                         return new Object[]{                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_getBooks", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_getBooks");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}

    }


    public static app_example_books_BookCatalog_getBooks waitToResult(){
    app_example_books_BookCatalog_getBooks _waitToResult = null;
    //if(app_example_books_BookCatalog_getBooks == null){
            try{
                logger.debug("waiting for result of app_example_books_BookCatalog_getBooks");
                //app_example_books_BookCatalog_getBooks = new app_example_books_BookCatalog_getBooks();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_BookCatalog_getBooks(){
                        public void app_example_books_BookCatalog_getBooks(java.util.List<app.example.books.Book> result){
                        try{
                            logger.debug("done waiting for app_example_books_BookCatalog_getBooks");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_getBooks");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_getBooks", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_getBooks");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static app_example_books_BookCatalog_getBooks waitToResult(CallFuture<java.util.List<app.example.books.Book>> future){
    app_example_books_BookCatalog_getBooks _waitToResult = null;
    //if(app_example_books_BookCatalog_getBooks == null){
            try{
                logger.debug("waiting for result of app_example_books_BookCatalog_getBooks");
                //app_example_books_BookCatalog_getBooks = new app_example_books_BookCatalog_getBooks();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_BookCatalog_getBooks(){
                        public void app_example_books_BookCatalog_getBooks(java.util.List<app.example.books.Book> result){
                        try{
                            logger.debug("done waiting for app_example_books_BookCatalog_getBooks");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_getBooks");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_getBooks", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_getBooks");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<app_example_books_BookCatalog_getBooks>> resultHandler)throws Exception{
    app_example_books_BookCatalog_getBooks _waitToResult = null;
    //if(app_example_books_BookCatalog_getBooks == null){
            try{
                logger.debug("waiting for result of app_example_books_BookCatalog_getBooks");
                //app_example_books_BookCatalog_getBooks = new app_example_books_BookCatalog_getBooks();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_BookCatalog_getBooks(){
                public void app_example_books_BookCatalog_getBooks(java.util.List<app.example.books.Book> result){
                try{
                   logger.debug("done waiting for app_example_books_BookCatalog_getBooks");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_getBooks");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_getBooks", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_getBooks");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }



    public java.util.List<app.example.books.Book> get_Result(){
        return _result;
    }

    public app_example_books_BookCatalog_getBooks get_Result(Handler<AsyncResult<java.util.List<app.example.books.Book>>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public app_example_books_BookCatalog_getBooks get_Result(CallFuture<java.util.List<app.example.books.Book>> future){
         future.handleResult(_result);
         return this;
    }








}


public static class app_example_books_BookCatalog_printBook implements IListener{
    private static app_example_books_BookCatalog_printBook app_example_books_BookCatalog_printBook= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    static app.example.books.Book book = null;

    public     java.lang.Object[] app_example_books_BookCatalog_printBook(app.example.books.Book book    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_BookCatalog_printBook args :"  +" book:" + book       );

       return new Object[]{                book            };
    }


    public static app_example_books_BookCatalog_printBook waitUntil(ExpressionBuilder exp){
    app_example_books_BookCatalog_printBook _waitUntil = null;
    //if(app_example_books_BookCatalog_printBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_printBook");
                //app_example_books_BookCatalog_printBook = new app_example_books_BookCatalog_printBook();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_BookCatalog_printBook(){
                        @Override
                        public synchronized Object[] app_example_books_BookCatalog_printBook(app.example.books.Book book){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("book", book);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_BookCatalog_printBook");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_printBook seen:"+seen);
                            app_example_books_BookCatalog_printBook.book = app_example_books_BookCatalog_printBook.book == null ? book : app_example_books_BookCatalog_printBook.book;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_printBook");
                            lock.countDown();
                            return new Object[]{app_example_books_BookCatalog_printBook.book};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{book};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_printBook", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_printBook");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static app_example_books_BookCatalog_printBook waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    app_example_books_BookCatalog_printBook _waitUntil = null;
    //if(app_example_books_BookCatalog_printBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_printBook");
                //app_example_books_BookCatalog_printBook = new app_example_books_BookCatalog_printBook();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_BookCatalog_printBook(){
                        @Override
                        public synchronized Object[] app_example_books_BookCatalog_printBook(app.example.books.Book book){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("book", book);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_BookCatalog_printBook");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_printBook seen:"+seen);
                            app_example_books_BookCatalog_printBook.book = app_example_books_BookCatalog_printBook.book == null ? book : app_example_books_BookCatalog_printBook.book;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_printBook");
                            future.handleResult(new Object[]{app_example_books_BookCatalog_printBook.book});
                             lock.countDown();
                             return new Object[]{app_example_books_BookCatalog_printBook.book};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{book});
                        return new Object[]{book};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_printBook", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_printBook");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<app_example_books_BookCatalog_printBook>> resultHandler)throws Exception{
    app_example_books_BookCatalog_printBook _waitUntil = null;
    //if(app_example_books_BookCatalog_printBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_printBook");
                //app_example_books_BookCatalog_printBook = new app_example_books_BookCatalog_printBook();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_BookCatalog_printBook(){
                        @Override
                        public synchronized Object[] app_example_books_BookCatalog_printBook(app.example.books.Book book){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("book", book);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_BookCatalog_printBook");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_printBook seen:"+seen);
                            app_example_books_BookCatalog_printBook.book = app_example_books_BookCatalog_printBook.book == null ? book : app_example_books_BookCatalog_printBook.book;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_printBook");
                            lock.countDown();
                            return new Object[]{app_example_books_BookCatalog_printBook.book};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{book};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_printBook", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_printBook");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static app_example_books_BookCatalog_printBook waitTo(CallFuture<Object[]> future){
    app_example_books_BookCatalog_printBook _waitTo = null;
    //if(app_example_books_BookCatalog_printBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_printBook");
                //app_example_books_BookCatalog_printBook = new app_example_books_BookCatalog_printBook();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_BookCatalog_printBook(){
                        @Override
                        public Object[] app_example_books_BookCatalog_printBook(app.example.books.Book book){
                        try{
                            logger.debug("done waiting for app_example_books_BookCatalog_printBook");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_printBook seen:"+seen);
                            app_example_books_BookCatalog_printBook.book = app_example_books_BookCatalog_printBook.book == null ? book : app_example_books_BookCatalog_printBook.book;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_printBook");
                            future.handleResult(new Object[]{app_example_books_BookCatalog_printBook.book});
                            lock.countDown();
                            return new Object[]{app_example_books_BookCatalog_printBook.book};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_printBook", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_printBook");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static app_example_books_BookCatalog_printBook waitTo(){
    app_example_books_BookCatalog_printBook _waitTo = null;
    //if(app_example_books_BookCatalog_printBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_printBook");
                //app_example_books_BookCatalog_printBook = new app_example_books_BookCatalog_printBook();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_BookCatalog_printBook(){
                        @Override
                        public Object[] app_example_books_BookCatalog_printBook(app.example.books.Book book){
                        try{
                            logger.debug("done waiting for app_example_books_BookCatalog_printBook");
                            seen = true;
                            logger.debug("got call for app_example_books_BookCatalog_printBook seen:"+seen);
                            app_example_books_BookCatalog_printBook.book = app_example_books_BookCatalog_printBook.book == null ? book : app_example_books_BookCatalog_printBook.book;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_printBook");
                            lock.countDown();
                            return new Object[]{app_example_books_BookCatalog_printBook.book            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_printBook", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_printBook");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static void waitTo(Handler<AsyncResult<app_example_books_BookCatalog_printBook>> resultHandler)throws Exception{
    app_example_books_BookCatalog_printBook _waitTo = null;
    //if(app_example_books_BookCatalog_printBook == null){
            try{
                logger.debug("waiting for app_example_books_BookCatalog_printBook");
               // app_example_books_BookCatalog_printBook = new app_example_books_BookCatalog_printBook();
                lock = new CountDownLatch(1);
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                _waitTo = new app_example_books_BookCatalog_printBook(){
                     @Override
                     public Object[] app_example_books_BookCatalog_printBook(                        app.example.books.Book book){
                    try{
                        logger.debug("done waiting for app_example_books_BookCatalog_printBook");
                        seen = true;
                        logger.debug("got call for app_example_books_BookCatalog_printBook seen:"+seen);
                         app_example_books_BookCatalog_printBook.book = app_example_books_BookCatalog_printBook.book == null ? book : app_example_books_BookCatalog_printBook.book;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_BookCatalog_printBook");
                         lock.countDown();
                         return new Object[]{app_example_books_BookCatalog_printBook.book                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_BookCatalog_printBook", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_BookCatalog_printBook");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}

    }




    public app.example.books.Book getBook()throws Exception{
        return app_example_books_BookCatalog_printBook.book;
    }

    public app_example_books_BookCatalog_printBook getBook(Handler<AsyncResult<app.example.books.Book>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(app_example_books_BookCatalog_printBook.book));
        return this;
    }

    public app_example_books_BookCatalog_printBook getBook(CallFuture<app.example.books.Book> future)throws Exception{
       future.handleResult(app_example_books_BookCatalog_printBook.book);
       return this;
    }

    public app_example_books_BookCatalog_printBook setBook(app.example.books.Book book)throws Exception{
        app_example_books_BookCatalog_printBook.book = book;
        return this;
    }





}


public static class app_example_books_Book_getTitle implements IListener{
    private static app_example_books_Book_getTitle app_example_books_Book_getTitle= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    java.lang.String _result;

    public     java.lang.Object[] app_example_books_Book_getTitle(    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_Book_getTitle args :"        );

       return new Object[]{            };
    }

    public void app_example_books_Book_getTitle(java.lang.String result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_Book_getTitle args :java.lang.String " + result);
     _result = result;
    }

    public static app_example_books_Book_getTitle waitUntil(ExpressionBuilder exp){
    app_example_books_Book_getTitle _waitUntil = null;
    //if(app_example_books_Book_getTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_getTitle");
                //app_example_books_Book_getTitle = new app_example_books_Book_getTitle();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_getTitle(){
                        @Override
                        public synchronized Object[] app_example_books_Book_getTitle(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_getTitle");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getTitle seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getTitle");
                            lock.countDown();
                            return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getTitle", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getTitle");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static app_example_books_Book_getTitle waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    app_example_books_Book_getTitle _waitUntil = null;
    //if(app_example_books_Book_getTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_getTitle");
                //app_example_books_Book_getTitle = new app_example_books_Book_getTitle();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_getTitle(){
                        @Override
                        public synchronized Object[] app_example_books_Book_getTitle(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_getTitle");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getTitle seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getTitle");
                            future.handleResult(new Object[]{});
                             lock.countDown();
                             return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getTitle", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getTitle");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<app_example_books_Book_getTitle>> resultHandler)throws Exception{
    app_example_books_Book_getTitle _waitUntil = null;
    //if(app_example_books_Book_getTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_getTitle");
                //app_example_books_Book_getTitle = new app_example_books_Book_getTitle();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_getTitle(){
                        @Override
                        public synchronized Object[] app_example_books_Book_getTitle(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_getTitle");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getTitle seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getTitle");
                            lock.countDown();
                            return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getTitle", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getTitle");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static app_example_books_Book_getTitle waitTo(CallFuture<Object[]> future){
    app_example_books_Book_getTitle _waitTo = null;
    //if(app_example_books_Book_getTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_getTitle");
                //app_example_books_Book_getTitle = new app_example_books_Book_getTitle();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_getTitle(){
                        @Override
                        public Object[] app_example_books_Book_getTitle(){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getTitle");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getTitle seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getTitle");
                            future.handleResult(new Object[]{});
                            lock.countDown();
                            return new Object[]{};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getTitle", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getTitle");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static app_example_books_Book_getTitle waitTo(){
    app_example_books_Book_getTitle _waitTo = null;
    //if(app_example_books_Book_getTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_getTitle");
                //app_example_books_Book_getTitle = new app_example_books_Book_getTitle();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_getTitle(){
                        @Override
                        public Object[] app_example_books_Book_getTitle(){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getTitle");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getTitle seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getTitle");
                            lock.countDown();
                            return new Object[]{            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getTitle", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getTitle");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static void waitTo(Handler<AsyncResult<app_example_books_Book_getTitle>> resultHandler)throws Exception{
    app_example_books_Book_getTitle _waitTo = null;
    //if(app_example_books_Book_getTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_getTitle");
               // app_example_books_Book_getTitle = new app_example_books_Book_getTitle();
                lock = new CountDownLatch(1);
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                _waitTo = new app_example_books_Book_getTitle(){
                     @Override
                     public Object[] app_example_books_Book_getTitle(){
                    try{
                        logger.debug("done waiting for app_example_books_Book_getTitle");
                        seen = true;
                        logger.debug("got call for app_example_books_Book_getTitle seen:"+seen);
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getTitle");
                         lock.countDown();
                         return new Object[]{                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getTitle", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getTitle");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}

    }


    public static app_example_books_Book_getTitle waitToResult(){
    app_example_books_Book_getTitle _waitToResult = null;
    //if(app_example_books_Book_getTitle == null){
            try{
                logger.debug("waiting for result of app_example_books_Book_getTitle");
                //app_example_books_Book_getTitle = new app_example_books_Book_getTitle();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_Book_getTitle(){
                        public void app_example_books_Book_getTitle(java.lang.String result){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getTitle");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getTitle");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getTitle", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getTitle");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static app_example_books_Book_getTitle waitToResult(CallFuture<java.lang.String> future){
    app_example_books_Book_getTitle _waitToResult = null;
    //if(app_example_books_Book_getTitle == null){
            try{
                logger.debug("waiting for result of app_example_books_Book_getTitle");
                //app_example_books_Book_getTitle = new app_example_books_Book_getTitle();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_Book_getTitle(){
                        public void app_example_books_Book_getTitle(java.lang.String result){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getTitle");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getTitle");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getTitle", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getTitle");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<app_example_books_Book_getTitle>> resultHandler)throws Exception{
    app_example_books_Book_getTitle _waitToResult = null;
    //if(app_example_books_Book_getTitle == null){
            try{
                logger.debug("waiting for result of app_example_books_Book_getTitle");
                //app_example_books_Book_getTitle = new app_example_books_Book_getTitle();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_Book_getTitle(){
                public void app_example_books_Book_getTitle(java.lang.String result){
                try{
                   logger.debug("done waiting for app_example_books_Book_getTitle");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getTitle");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getTitle", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getTitle");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }



    public java.lang.String get_Result(){
        return _result;
    }

    public app_example_books_Book_getTitle get_Result(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public app_example_books_Book_getTitle get_Result(CallFuture<java.lang.String> future){
         future.handleResult(_result);
         return this;
    }








}


public static class app_example_books_Book_setTitle implements IListener{
    private static app_example_books_Book_setTitle app_example_books_Book_setTitle= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    static java.lang.String title = null;

    public     java.lang.Object[] app_example_books_Book_setTitle(java.lang.String title    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_Book_setTitle args :"  +" title:" + title       );

       return new Object[]{                title            };
    }


    public static app_example_books_Book_setTitle waitUntil(ExpressionBuilder exp){
    app_example_books_Book_setTitle _waitUntil = null;
    //if(app_example_books_Book_setTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_setTitle");
                //app_example_books_Book_setTitle = new app_example_books_Book_setTitle();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_setTitle(){
                        @Override
                        public synchronized Object[] app_example_books_Book_setTitle(java.lang.String title){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("title", title);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_setTitle");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setTitle seen:"+seen);
                            app_example_books_Book_setTitle.title = app_example_books_Book_setTitle.title == null ? title : app_example_books_Book_setTitle.title;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setTitle");
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setTitle.title};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{title};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setTitle", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setTitle");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static app_example_books_Book_setTitle waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    app_example_books_Book_setTitle _waitUntil = null;
    //if(app_example_books_Book_setTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_setTitle");
                //app_example_books_Book_setTitle = new app_example_books_Book_setTitle();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_setTitle(){
                        @Override
                        public synchronized Object[] app_example_books_Book_setTitle(java.lang.String title){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("title", title);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_setTitle");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setTitle seen:"+seen);
                            app_example_books_Book_setTitle.title = app_example_books_Book_setTitle.title == null ? title : app_example_books_Book_setTitle.title;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setTitle");
                            future.handleResult(new Object[]{app_example_books_Book_setTitle.title});
                             lock.countDown();
                             return new Object[]{app_example_books_Book_setTitle.title};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{title});
                        return new Object[]{title};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setTitle", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setTitle");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<app_example_books_Book_setTitle>> resultHandler)throws Exception{
    app_example_books_Book_setTitle _waitUntil = null;
    //if(app_example_books_Book_setTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_setTitle");
                //app_example_books_Book_setTitle = new app_example_books_Book_setTitle();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_setTitle(){
                        @Override
                        public synchronized Object[] app_example_books_Book_setTitle(java.lang.String title){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("title", title);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_setTitle");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setTitle seen:"+seen);
                            app_example_books_Book_setTitle.title = app_example_books_Book_setTitle.title == null ? title : app_example_books_Book_setTitle.title;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setTitle");
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setTitle.title};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{title};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setTitle", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setTitle");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static app_example_books_Book_setTitle waitTo(CallFuture<Object[]> future){
    app_example_books_Book_setTitle _waitTo = null;
    //if(app_example_books_Book_setTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_setTitle");
                //app_example_books_Book_setTitle = new app_example_books_Book_setTitle();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_setTitle(){
                        @Override
                        public Object[] app_example_books_Book_setTitle(java.lang.String title){
                        try{
                            logger.debug("done waiting for app_example_books_Book_setTitle");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setTitle seen:"+seen);
                            app_example_books_Book_setTitle.title = app_example_books_Book_setTitle.title == null ? title : app_example_books_Book_setTitle.title;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setTitle");
                            future.handleResult(new Object[]{app_example_books_Book_setTitle.title});
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setTitle.title};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setTitle", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setTitle");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static app_example_books_Book_setTitle waitTo(){
    app_example_books_Book_setTitle _waitTo = null;
    //if(app_example_books_Book_setTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_setTitle");
                //app_example_books_Book_setTitle = new app_example_books_Book_setTitle();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_setTitle(){
                        @Override
                        public Object[] app_example_books_Book_setTitle(java.lang.String title){
                        try{
                            logger.debug("done waiting for app_example_books_Book_setTitle");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setTitle seen:"+seen);
                            app_example_books_Book_setTitle.title = app_example_books_Book_setTitle.title == null ? title : app_example_books_Book_setTitle.title;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setTitle");
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setTitle.title            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setTitle", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setTitle");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static void waitTo(Handler<AsyncResult<app_example_books_Book_setTitle>> resultHandler)throws Exception{
    app_example_books_Book_setTitle _waitTo = null;
    //if(app_example_books_Book_setTitle == null){
            try{
                logger.debug("waiting for app_example_books_Book_setTitle");
               // app_example_books_Book_setTitle = new app_example_books_Book_setTitle();
                lock = new CountDownLatch(1);
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                _waitTo = new app_example_books_Book_setTitle(){
                     @Override
                     public Object[] app_example_books_Book_setTitle(                        java.lang.String title){
                    try{
                        logger.debug("done waiting for app_example_books_Book_setTitle");
                        seen = true;
                        logger.debug("got call for app_example_books_Book_setTitle seen:"+seen);
                         app_example_books_Book_setTitle.title = app_example_books_Book_setTitle.title == null ? title : app_example_books_Book_setTitle.title;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setTitle");
                         lock.countDown();
                         return new Object[]{app_example_books_Book_setTitle.title                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setTitle", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setTitle");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}

    }




    public java.lang.String getTitle()throws Exception{
        return app_example_books_Book_setTitle.title;
    }

    public app_example_books_Book_setTitle getTitle(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(app_example_books_Book_setTitle.title));
        return this;
    }

    public app_example_books_Book_setTitle getTitle(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(app_example_books_Book_setTitle.title);
       return this;
    }

    public app_example_books_Book_setTitle setTitle(java.lang.String title)throws Exception{
        app_example_books_Book_setTitle.title = title;
        return this;
    }





}


public static class app_example_books_Book_getAuthor implements IListener{
    private static app_example_books_Book_getAuthor app_example_books_Book_getAuthor= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    java.lang.String _result;

    public     java.lang.Object[] app_example_books_Book_getAuthor(    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_Book_getAuthor args :"        );

       return new Object[]{            };
    }

    public void app_example_books_Book_getAuthor(java.lang.String result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_Book_getAuthor args :java.lang.String " + result);
     _result = result;
    }

    public static app_example_books_Book_getAuthor waitUntil(ExpressionBuilder exp){
    app_example_books_Book_getAuthor _waitUntil = null;
    //if(app_example_books_Book_getAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_getAuthor");
                //app_example_books_Book_getAuthor = new app_example_books_Book_getAuthor();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_getAuthor(){
                        @Override
                        public synchronized Object[] app_example_books_Book_getAuthor(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_getAuthor");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getAuthor seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getAuthor");
                            lock.countDown();
                            return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getAuthor", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getAuthor");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static app_example_books_Book_getAuthor waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    app_example_books_Book_getAuthor _waitUntil = null;
    //if(app_example_books_Book_getAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_getAuthor");
                //app_example_books_Book_getAuthor = new app_example_books_Book_getAuthor();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_getAuthor(){
                        @Override
                        public synchronized Object[] app_example_books_Book_getAuthor(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_getAuthor");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getAuthor seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getAuthor");
                            future.handleResult(new Object[]{});
                             lock.countDown();
                             return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getAuthor", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getAuthor");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<app_example_books_Book_getAuthor>> resultHandler)throws Exception{
    app_example_books_Book_getAuthor _waitUntil = null;
    //if(app_example_books_Book_getAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_getAuthor");
                //app_example_books_Book_getAuthor = new app_example_books_Book_getAuthor();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_getAuthor(){
                        @Override
                        public synchronized Object[] app_example_books_Book_getAuthor(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_getAuthor");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getAuthor seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getAuthor");
                            lock.countDown();
                            return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getAuthor", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getAuthor");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static app_example_books_Book_getAuthor waitTo(CallFuture<Object[]> future){
    app_example_books_Book_getAuthor _waitTo = null;
    //if(app_example_books_Book_getAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_getAuthor");
                //app_example_books_Book_getAuthor = new app_example_books_Book_getAuthor();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_getAuthor(){
                        @Override
                        public Object[] app_example_books_Book_getAuthor(){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getAuthor");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getAuthor seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getAuthor");
                            future.handleResult(new Object[]{});
                            lock.countDown();
                            return new Object[]{};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getAuthor", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getAuthor");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static app_example_books_Book_getAuthor waitTo(){
    app_example_books_Book_getAuthor _waitTo = null;
    //if(app_example_books_Book_getAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_getAuthor");
                //app_example_books_Book_getAuthor = new app_example_books_Book_getAuthor();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_getAuthor(){
                        @Override
                        public Object[] app_example_books_Book_getAuthor(){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getAuthor");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getAuthor seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getAuthor");
                            lock.countDown();
                            return new Object[]{            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getAuthor", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getAuthor");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static void waitTo(Handler<AsyncResult<app_example_books_Book_getAuthor>> resultHandler)throws Exception{
    app_example_books_Book_getAuthor _waitTo = null;
    //if(app_example_books_Book_getAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_getAuthor");
               // app_example_books_Book_getAuthor = new app_example_books_Book_getAuthor();
                lock = new CountDownLatch(1);
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                _waitTo = new app_example_books_Book_getAuthor(){
                     @Override
                     public Object[] app_example_books_Book_getAuthor(){
                    try{
                        logger.debug("done waiting for app_example_books_Book_getAuthor");
                        seen = true;
                        logger.debug("got call for app_example_books_Book_getAuthor seen:"+seen);
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getAuthor");
                         lock.countDown();
                         return new Object[]{                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getAuthor", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getAuthor");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}

    }


    public static app_example_books_Book_getAuthor waitToResult(){
    app_example_books_Book_getAuthor _waitToResult = null;
    //if(app_example_books_Book_getAuthor == null){
            try{
                logger.debug("waiting for result of app_example_books_Book_getAuthor");
                //app_example_books_Book_getAuthor = new app_example_books_Book_getAuthor();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_Book_getAuthor(){
                        public void app_example_books_Book_getAuthor(java.lang.String result){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getAuthor");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getAuthor");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getAuthor", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getAuthor");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static app_example_books_Book_getAuthor waitToResult(CallFuture<java.lang.String> future){
    app_example_books_Book_getAuthor _waitToResult = null;
    //if(app_example_books_Book_getAuthor == null){
            try{
                logger.debug("waiting for result of app_example_books_Book_getAuthor");
                //app_example_books_Book_getAuthor = new app_example_books_Book_getAuthor();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_Book_getAuthor(){
                        public void app_example_books_Book_getAuthor(java.lang.String result){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getAuthor");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getAuthor");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getAuthor", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getAuthor");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<app_example_books_Book_getAuthor>> resultHandler)throws Exception{
    app_example_books_Book_getAuthor _waitToResult = null;
    //if(app_example_books_Book_getAuthor == null){
            try{
                logger.debug("waiting for result of app_example_books_Book_getAuthor");
                //app_example_books_Book_getAuthor = new app_example_books_Book_getAuthor();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_Book_getAuthor(){
                public void app_example_books_Book_getAuthor(java.lang.String result){
                try{
                   logger.debug("done waiting for app_example_books_Book_getAuthor");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getAuthor");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getAuthor", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getAuthor");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }



    public java.lang.String get_Result(){
        return _result;
    }

    public app_example_books_Book_getAuthor get_Result(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public app_example_books_Book_getAuthor get_Result(CallFuture<java.lang.String> future){
         future.handleResult(_result);
         return this;
    }








}


public static class app_example_books_Book_setAuthor implements IListener{
    private static app_example_books_Book_setAuthor app_example_books_Book_setAuthor= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    static java.lang.String author = null;

    public     java.lang.Object[] app_example_books_Book_setAuthor(java.lang.String author    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_Book_setAuthor args :"  +" author:" + author       );

       return new Object[]{                author            };
    }


    public static app_example_books_Book_setAuthor waitUntil(ExpressionBuilder exp){
    app_example_books_Book_setAuthor _waitUntil = null;
    //if(app_example_books_Book_setAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_setAuthor");
                //app_example_books_Book_setAuthor = new app_example_books_Book_setAuthor();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_setAuthor(){
                        @Override
                        public synchronized Object[] app_example_books_Book_setAuthor(java.lang.String author){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("author", author);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_setAuthor");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setAuthor seen:"+seen);
                            app_example_books_Book_setAuthor.author = app_example_books_Book_setAuthor.author == null ? author : app_example_books_Book_setAuthor.author;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setAuthor");
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setAuthor.author};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{author};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setAuthor", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setAuthor");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static app_example_books_Book_setAuthor waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    app_example_books_Book_setAuthor _waitUntil = null;
    //if(app_example_books_Book_setAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_setAuthor");
                //app_example_books_Book_setAuthor = new app_example_books_Book_setAuthor();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_setAuthor(){
                        @Override
                        public synchronized Object[] app_example_books_Book_setAuthor(java.lang.String author){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("author", author);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_setAuthor");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setAuthor seen:"+seen);
                            app_example_books_Book_setAuthor.author = app_example_books_Book_setAuthor.author == null ? author : app_example_books_Book_setAuthor.author;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setAuthor");
                            future.handleResult(new Object[]{app_example_books_Book_setAuthor.author});
                             lock.countDown();
                             return new Object[]{app_example_books_Book_setAuthor.author};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{author});
                        return new Object[]{author};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setAuthor", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setAuthor");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<app_example_books_Book_setAuthor>> resultHandler)throws Exception{
    app_example_books_Book_setAuthor _waitUntil = null;
    //if(app_example_books_Book_setAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_setAuthor");
                //app_example_books_Book_setAuthor = new app_example_books_Book_setAuthor();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_setAuthor(){
                        @Override
                        public synchronized Object[] app_example_books_Book_setAuthor(java.lang.String author){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("author", author);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_setAuthor");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setAuthor seen:"+seen);
                            app_example_books_Book_setAuthor.author = app_example_books_Book_setAuthor.author == null ? author : app_example_books_Book_setAuthor.author;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setAuthor");
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setAuthor.author};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{author};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setAuthor", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setAuthor");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static app_example_books_Book_setAuthor waitTo(CallFuture<Object[]> future){
    app_example_books_Book_setAuthor _waitTo = null;
    //if(app_example_books_Book_setAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_setAuthor");
                //app_example_books_Book_setAuthor = new app_example_books_Book_setAuthor();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_setAuthor(){
                        @Override
                        public Object[] app_example_books_Book_setAuthor(java.lang.String author){
                        try{
                            logger.debug("done waiting for app_example_books_Book_setAuthor");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setAuthor seen:"+seen);
                            app_example_books_Book_setAuthor.author = app_example_books_Book_setAuthor.author == null ? author : app_example_books_Book_setAuthor.author;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setAuthor");
                            future.handleResult(new Object[]{app_example_books_Book_setAuthor.author});
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setAuthor.author};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setAuthor", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setAuthor");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static app_example_books_Book_setAuthor waitTo(){
    app_example_books_Book_setAuthor _waitTo = null;
    //if(app_example_books_Book_setAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_setAuthor");
                //app_example_books_Book_setAuthor = new app_example_books_Book_setAuthor();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_setAuthor(){
                        @Override
                        public Object[] app_example_books_Book_setAuthor(java.lang.String author){
                        try{
                            logger.debug("done waiting for app_example_books_Book_setAuthor");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setAuthor seen:"+seen);
                            app_example_books_Book_setAuthor.author = app_example_books_Book_setAuthor.author == null ? author : app_example_books_Book_setAuthor.author;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setAuthor");
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setAuthor.author            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setAuthor", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setAuthor");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static void waitTo(Handler<AsyncResult<app_example_books_Book_setAuthor>> resultHandler)throws Exception{
    app_example_books_Book_setAuthor _waitTo = null;
    //if(app_example_books_Book_setAuthor == null){
            try{
                logger.debug("waiting for app_example_books_Book_setAuthor");
               // app_example_books_Book_setAuthor = new app_example_books_Book_setAuthor();
                lock = new CountDownLatch(1);
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                _waitTo = new app_example_books_Book_setAuthor(){
                     @Override
                     public Object[] app_example_books_Book_setAuthor(                        java.lang.String author){
                    try{
                        logger.debug("done waiting for app_example_books_Book_setAuthor");
                        seen = true;
                        logger.debug("got call for app_example_books_Book_setAuthor seen:"+seen);
                         app_example_books_Book_setAuthor.author = app_example_books_Book_setAuthor.author == null ? author : app_example_books_Book_setAuthor.author;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setAuthor");
                         lock.countDown();
                         return new Object[]{app_example_books_Book_setAuthor.author                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setAuthor", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setAuthor");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}

    }




    public java.lang.String getAuthor()throws Exception{
        return app_example_books_Book_setAuthor.author;
    }

    public app_example_books_Book_setAuthor getAuthor(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(app_example_books_Book_setAuthor.author));
        return this;
    }

    public app_example_books_Book_setAuthor getAuthor(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(app_example_books_Book_setAuthor.author);
       return this;
    }

    public app_example_books_Book_setAuthor setAuthor(java.lang.String author)throws Exception{
        app_example_books_Book_setAuthor.author = author;
        return this;
    }





}


public static class app_example_books_Book_getId implements IListener{
    private static app_example_books_Book_getId app_example_books_Book_getId= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    int _result;

    public     java.lang.Object[] app_example_books_Book_getId(    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_Book_getId args :"        );

       return new Object[]{            };
    }

    public void app_example_books_Book_getId(int result){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_Book_getId args :int " + result);
     _result = result;
    }

    public static app_example_books_Book_getId waitUntil(ExpressionBuilder exp){
    app_example_books_Book_getId _waitUntil = null;
    //if(app_example_books_Book_getId == null){
            try{
                logger.debug("waiting for app_example_books_Book_getId");
                //app_example_books_Book_getId = new app_example_books_Book_getId();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_getId(){
                        @Override
                        public synchronized Object[] app_example_books_Book_getId(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_getId");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getId seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getId");
                            lock.countDown();
                            return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getId", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getId");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static app_example_books_Book_getId waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    app_example_books_Book_getId _waitUntil = null;
    //if(app_example_books_Book_getId == null){
            try{
                logger.debug("waiting for app_example_books_Book_getId");
                //app_example_books_Book_getId = new app_example_books_Book_getId();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_getId(){
                        @Override
                        public synchronized Object[] app_example_books_Book_getId(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_getId");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getId seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getId");
                            future.handleResult(new Object[]{});
                             lock.countDown();
                             return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getId", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getId");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<app_example_books_Book_getId>> resultHandler)throws Exception{
    app_example_books_Book_getId _waitUntil = null;
    //if(app_example_books_Book_getId == null){
            try{
                logger.debug("waiting for app_example_books_Book_getId");
                //app_example_books_Book_getId = new app_example_books_Book_getId();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_getId(){
                        @Override
                        public synchronized Object[] app_example_books_Book_getId(){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(0);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_getId");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getId seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getId");
                            lock.countDown();
                            return new Object[]{};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getId", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getId");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static app_example_books_Book_getId waitTo(CallFuture<Object[]> future){
    app_example_books_Book_getId _waitTo = null;
    //if(app_example_books_Book_getId == null){
            try{
                logger.debug("waiting for app_example_books_Book_getId");
                //app_example_books_Book_getId = new app_example_books_Book_getId();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_getId(){
                        @Override
                        public Object[] app_example_books_Book_getId(){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getId");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getId seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getId");
                            future.handleResult(new Object[]{});
                            lock.countDown();
                            return new Object[]{};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getId", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getId");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static app_example_books_Book_getId waitTo(){
    app_example_books_Book_getId _waitTo = null;
    //if(app_example_books_Book_getId == null){
            try{
                logger.debug("waiting for app_example_books_Book_getId");
                //app_example_books_Book_getId = new app_example_books_Book_getId();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_getId(){
                        @Override
                        public Object[] app_example_books_Book_getId(){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getId");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_getId seen:"+seen);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getId");
                            lock.countDown();
                            return new Object[]{            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getId", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getId");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static void waitTo(Handler<AsyncResult<app_example_books_Book_getId>> resultHandler)throws Exception{
    app_example_books_Book_getId _waitTo = null;
    //if(app_example_books_Book_getId == null){
            try{
                logger.debug("waiting for app_example_books_Book_getId");
               // app_example_books_Book_getId = new app_example_books_Book_getId();
                lock = new CountDownLatch(1);
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                _waitTo = new app_example_books_Book_getId(){
                     @Override
                     public Object[] app_example_books_Book_getId(){
                    try{
                        logger.debug("done waiting for app_example_books_Book_getId");
                        seen = true;
                        logger.debug("got call for app_example_books_Book_getId seen:"+seen);
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getId");
                         lock.countDown();
                         return new Object[]{                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getId", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getId");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}

    }


    public static app_example_books_Book_getId waitToResult(){
    app_example_books_Book_getId _waitToResult = null;
    //if(app_example_books_Book_getId == null){
            try{
                logger.debug("waiting for result of app_example_books_Book_getId");
                //app_example_books_Book_getId = new app_example_books_Book_getId();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_Book_getId(){
                        public void app_example_books_Book_getId(int result){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getId");
                            _result = result;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getId");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getId", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getId");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

public static app_example_books_Book_getId waitToResult(CallFuture<java.lang.Integer> future){
    app_example_books_Book_getId _waitToResult = null;
    //if(app_example_books_Book_getId == null){
            try{
                logger.debug("waiting for result of app_example_books_Book_getId");
                //app_example_books_Book_getId = new app_example_books_Book_getId();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_Book_getId(){
                        public void app_example_books_Book_getId(int result){
                        try{
                            logger.debug("done waiting for app_example_books_Book_getId");
                            _result = result;
                            future.handleResult(result);
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getId");
                            lockForResult.countDown();
                        }catch (Exception e){
                                logger.error("fail waitTo ",e);
                        }
                    }
                };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getId", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                     throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getId");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitToResult;
    }

    public static void waitToResult(Handler<AsyncResult<app_example_books_Book_getId>> resultHandler)throws Exception{
    app_example_books_Book_getId _waitToResult = null;
    //if(app_example_books_Book_getId == null){
            try{
                logger.debug("waiting for result of app_example_books_Book_getId");
                //app_example_books_Book_getId = new app_example_books_Book_getId();
                lockForResult = new CountDownLatch(1);
                _waitToResult = new app_example_books_Book_getId(){
                public void app_example_books_Book_getId(int result){
                try{
                   logger.debug("done waiting for app_example_books_Book_getId");
                   _result = result;
                   org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_getId");
                   lockForResult.countDown();
                }catch (Exception e){
                     logger.error("fail waitToResult ",e);
                }
         }
    };
                {
                   org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_getId", _waitToResult);
                }
                lockForResult.await(timeOutInMin, TimeUnit.MINUTES);
                if(lockForResult.getCount() > 0){
                   throw new Exception("timeOut for lockForResult ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_getId");
                }
                resultHandler.handle(Future.handleResult(_waitToResult));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
       // }
    }



    public int get_Result(){
        return _result;
    }

    public app_example_books_Book_getId get_Result(Handler<AsyncResult<java.lang.Integer>> resultHandler)throws Exception{
        try{
            resultHandler.handle(Future.handleResult(_result));
        }catch (Exception e){
          logger.error("fail  get_Result ",e);
          resultHandler.handle(Future.handleError(e));
        }
        logger.debug("successfully get_Result "+ _result);
        return this;
    }

    public app_example_books_Book_getId get_Result(CallFuture<java.lang.Integer> future){
         future.handleResult(_result);
         return this;
    }








}


public static class app_example_books_Book_setId implements IListener{
    private static app_example_books_Book_setId app_example_books_Book_setId= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    static int id = -1;

    public     java.lang.Object[] app_example_books_Book_setId(int id    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " app_example_books_Book_setId args :"  +" id:" + id       );

       return new Object[]{                id            };
    }


    public static app_example_books_Book_setId waitUntil(ExpressionBuilder exp){
    app_example_books_Book_setId _waitUntil = null;
    //if(app_example_books_Book_setId == null){
            try{
                logger.debug("waiting for app_example_books_Book_setId");
                //app_example_books_Book_setId = new app_example_books_Book_setId();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_setId(){
                        @Override
                        public synchronized Object[] app_example_books_Book_setId(int id){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("id", id);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_setId");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setId seen:"+seen);
                            app_example_books_Book_setId.id = app_example_books_Book_setId.id == -1 ? id : app_example_books_Book_setId.id;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setId");
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setId.id};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{id};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setId", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setId");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static app_example_books_Book_setId waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    app_example_books_Book_setId _waitUntil = null;
    //if(app_example_books_Book_setId == null){
            try{
                logger.debug("waiting for app_example_books_Book_setId");
                //app_example_books_Book_setId = new app_example_books_Book_setId();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_setId(){
                        @Override
                        public synchronized Object[] app_example_books_Book_setId(int id){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("id", id);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_setId");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setId seen:"+seen);
                            app_example_books_Book_setId.id = app_example_books_Book_setId.id == -1 ? id : app_example_books_Book_setId.id;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setId");
                            future.handleResult(new Object[]{app_example_books_Book_setId.id});
                             lock.countDown();
                             return new Object[]{app_example_books_Book_setId.id};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{id});
                        return new Object[]{id};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setId", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setId");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<app_example_books_Book_setId>> resultHandler)throws Exception{
    app_example_books_Book_setId _waitUntil = null;
    //if(app_example_books_Book_setId == null){
            try{
                logger.debug("waiting for app_example_books_Book_setId");
                //app_example_books_Book_setId = new app_example_books_Book_setId();
                lock = new CountDownLatch(1);
                _waitUntil =  new app_example_books_Book_setId(){
                        @Override
                        public synchronized Object[] app_example_books_Book_setId(int id){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("id", id);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for app_example_books_Book_setId");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setId seen:"+seen);
                            app_example_books_Book_setId.id = app_example_books_Book_setId.id == -1 ? id : app_example_books_Book_setId.id;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setId");
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setId.id};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{id};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setId", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setId");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static app_example_books_Book_setId waitTo(CallFuture<Object[]> future){
    app_example_books_Book_setId _waitTo = null;
    //if(app_example_books_Book_setId == null){
            try{
                logger.debug("waiting for app_example_books_Book_setId");
                //app_example_books_Book_setId = new app_example_books_Book_setId();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_setId(){
                        @Override
                        public Object[] app_example_books_Book_setId(int id){
                        try{
                            logger.debug("done waiting for app_example_books_Book_setId");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setId seen:"+seen);
                            app_example_books_Book_setId.id = app_example_books_Book_setId.id == -1 ? id : app_example_books_Book_setId.id;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setId");
                            future.handleResult(new Object[]{app_example_books_Book_setId.id});
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setId.id};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setId", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setId");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static app_example_books_Book_setId waitTo(){
    app_example_books_Book_setId _waitTo = null;
    //if(app_example_books_Book_setId == null){
            try{
                logger.debug("waiting for app_example_books_Book_setId");
                //app_example_books_Book_setId = new app_example_books_Book_setId();
                lock = new CountDownLatch(1);
                _waitTo =  new app_example_books_Book_setId(){
                        @Override
                        public Object[] app_example_books_Book_setId(int id){
                        try{
                            logger.debug("done waiting for app_example_books_Book_setId");
                            seen = true;
                            logger.debug("got call for app_example_books_Book_setId seen:"+seen);
                            app_example_books_Book_setId.id = app_example_books_Book_setId.id == -1 ? id : app_example_books_Book_setId.id;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setId");
                            lock.countDown();
                            return new Object[]{app_example_books_Book_setId.id            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setId", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setId");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static void waitTo(Handler<AsyncResult<app_example_books_Book_setId>> resultHandler)throws Exception{
    app_example_books_Book_setId _waitTo = null;
    //if(app_example_books_Book_setId == null){
            try{
                logger.debug("waiting for app_example_books_Book_setId");
               // app_example_books_Book_setId = new app_example_books_Book_setId();
                lock = new CountDownLatch(1);
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                _waitTo = new app_example_books_Book_setId(){
                     @Override
                     public Object[] app_example_books_Book_setId(                        int id){
                    try{
                        logger.debug("done waiting for app_example_books_Book_setId");
                        seen = true;
                        logger.debug("got call for app_example_books_Book_setId seen:"+seen);
                         app_example_books_Book_setId.id = app_example_books_Book_setId.id == -1 ? id : app_example_books_Book_setId.id;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("app_example_books_Book_setId");
                         lock.countDown();
                         return new Object[]{app_example_books_Book_setId.id                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("app_example_books_Book_setId", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to app_example_books_Book_setId");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}

    }




    public int getId()throws Exception{
        return app_example_books_Book_setId.id;
    }

    public app_example_books_Book_setId getId(Handler<AsyncResult<java.lang.Integer>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(app_example_books_Book_setId.id));
        return this;
    }

    public app_example_books_Book_setId getId(CallFuture<java.lang.Integer> future)throws Exception{
       future.handleResult(app_example_books_Book_setId.id);
       return this;
    }

    public app_example_books_Book_setId setId(int id)throws Exception{
        app_example_books_Book_setId.id = id;
        return this;
    }





}

}