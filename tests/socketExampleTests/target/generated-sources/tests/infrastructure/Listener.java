/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tests.infrastructure;
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import org.softauto.core.AsyncResult;
import org.softauto.core.Handler;
import org.softauto.core.Future;
import org.softauto.serializer.CallFuture;
import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;
import java.lang.reflect.Parameter;
import org.softauto.core.Utils;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import java.util.HashMap;
import org.softauto.espl.ExpressionBuilder;
import org.softauto.espl.EvulExp;
import org.softauto.core.IListener;

@org.apache.avro.specific.AvroGenerated
public class Listener {

    private static org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(Listener.class);
    public static long timeOutInMin = 1;
    static Map<String, Object> map = null;

    public static void setTimeOut(long min){
        timeOutInMin = min;
    }





public static class com_baeldung_socket_EchoMultiServer_echo implements IListener{
    private static com_baeldung_socket_EchoMultiServer_echo com_baeldung_socket_EchoMultiServer_echo= null;
    static boolean seen = false;
    static Map<String, Object> map = null;
    static CountDownLatch lock = new CountDownLatch(0);
    static CountDownLatch lockForResult = new CountDownLatch(0);
    static java.lang.String message = null;

    public     java.lang.Object[] com_baeldung_socket_EchoMultiServer_echo(java.lang.String message    ){
     LogManager.getLogger().log(Level.getLevel("INFO [SUT]"), " com_baeldung_socket_EchoMultiServer_echo args :"  +" message:" + message       );

       return new Object[]{                message            };
    }





    public static com_baeldung_socket_EchoMultiServer_echo waitUntil(ExpressionBuilder exp){
    com_baeldung_socket_EchoMultiServer_echo _waitUntil = null;
    //if(com_baeldung_socket_EchoMultiServer_echo == null){
            try{
                logger.debug("waiting for com_baeldung_socket_EchoMultiServer_echo");
                //com_baeldung_socket_EchoMultiServer_echo = new com_baeldung_socket_EchoMultiServer_echo();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_socket_EchoMultiServer_echo(){
                        @Override
                        public synchronized Object[] com_baeldung_socket_EchoMultiServer_echo(java.lang.String message){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("message", message);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_socket_EchoMultiServer_echo");
                            seen = true;
                            logger.debug("got call for com_baeldung_socket_EchoMultiServer_echo seen:"+seen);
                            com_baeldung_socket_EchoMultiServer_echo.message = com_baeldung_socket_EchoMultiServer_echo.message == null ? message : com_baeldung_socket_EchoMultiServer_echo.message;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_socket_EchoMultiServer_echo");
                            lock.countDown();
                            return new Object[]{com_baeldung_socket_EchoMultiServer_echo.message};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{message};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_socket_EchoMultiServer_echo", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_socket_EchoMultiServer_echo");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static com_baeldung_socket_EchoMultiServer_echo waitUntil(ExpressionBuilder exp,CallFuture<Object[]> future){
    com_baeldung_socket_EchoMultiServer_echo _waitUntil = null;
    //if(com_baeldung_socket_EchoMultiServer_echo == null){
            try{
                logger.debug("waiting for com_baeldung_socket_EchoMultiServer_echo");
                //com_baeldung_socket_EchoMultiServer_echo = new com_baeldung_socket_EchoMultiServer_echo();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_socket_EchoMultiServer_echo(){
                        @Override
                        public synchronized Object[] com_baeldung_socket_EchoMultiServer_echo(java.lang.String message){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("message", message);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_socket_EchoMultiServer_echo");
                            seen = true;
                            logger.debug("got call for com_baeldung_socket_EchoMultiServer_echo seen:"+seen);
                            com_baeldung_socket_EchoMultiServer_echo.message = com_baeldung_socket_EchoMultiServer_echo.message == null ? message : com_baeldung_socket_EchoMultiServer_echo.message;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_socket_EchoMultiServer_echo");
                            future.handleResult(new Object[]{com_baeldung_socket_EchoMultiServer_echo.message});
                             lock.countDown();
                             return new Object[]{com_baeldung_socket_EchoMultiServer_echo.message};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                         future.handleResult(new Object[]{message});
                        return new Object[]{message};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_socket_EchoMultiServer_echo", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_socket_EchoMultiServer_echo");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitUntil;
    }


    public static void waitUntil(ExpressionBuilder exp,Handler<AsyncResult<com_baeldung_socket_EchoMultiServer_echo>> resultHandler)throws Exception{
    com_baeldung_socket_EchoMultiServer_echo _waitUntil = null;
    //if(com_baeldung_socket_EchoMultiServer_echo == null){
            try{
                logger.debug("waiting for com_baeldung_socket_EchoMultiServer_echo");
                //com_baeldung_socket_EchoMultiServer_echo = new com_baeldung_socket_EchoMultiServer_echo();
                lock = new CountDownLatch(1);
                _waitUntil =  new com_baeldung_socket_EchoMultiServer_echo(){
                        @Override
                        public synchronized Object[] com_baeldung_socket_EchoMultiServer_echo(java.lang.String message){
                        try{
                        Map<String, Object> params = new LinkedHashMap<String, Object>(1);
                        params.put("message", message);
                        if(new EvulExp().setExp(exp).setLocalParams(params).evaluate()) {
                            logger.debug("done waiting for com_baeldung_socket_EchoMultiServer_echo");
                            seen = true;
                            logger.debug("got call for com_baeldung_socket_EchoMultiServer_echo seen:"+seen);
                            com_baeldung_socket_EchoMultiServer_echo.message = com_baeldung_socket_EchoMultiServer_echo.message == null ? message : com_baeldung_socket_EchoMultiServer_echo.message;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_socket_EchoMultiServer_echo");
                            lock.countDown();
                            return new Object[]{com_baeldung_socket_EchoMultiServer_echo.message};
                        }
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{message};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_socket_EchoMultiServer_echo", _waitUntil);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_socket_EchoMultiServer_echo");
                }
                resultHandler.handle(Future.handleResult( _waitUntil));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError( e));
            }
        //}

    }

    public static com_baeldung_socket_EchoMultiServer_echo waitTo(CallFuture<Object[]> future){
    com_baeldung_socket_EchoMultiServer_echo _waitTo = null;
    //if(com_baeldung_socket_EchoMultiServer_echo == null){
            try{
                logger.debug("waiting for com_baeldung_socket_EchoMultiServer_echo");
                //com_baeldung_socket_EchoMultiServer_echo = new com_baeldung_socket_EchoMultiServer_echo();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_socket_EchoMultiServer_echo(){
                        @Override
                        public Object[] com_baeldung_socket_EchoMultiServer_echo(java.lang.String message){
                        try{
                            logger.debug("done waiting for com_baeldung_socket_EchoMultiServer_echo");
                            seen = true;
                            logger.debug("got call for com_baeldung_socket_EchoMultiServer_echo seen:"+seen);
                            com_baeldung_socket_EchoMultiServer_echo.message = com_baeldung_socket_EchoMultiServer_echo.message == null ? message : com_baeldung_socket_EchoMultiServer_echo.message;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_socket_EchoMultiServer_echo");
                            future.handleResult(new Object[]{com_baeldung_socket_EchoMultiServer_echo.message});
                            lock.countDown();
                            return new Object[]{com_baeldung_socket_EchoMultiServer_echo.message};
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        future.handleResult(new Object[]{});
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_socket_EchoMultiServer_echo", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_socket_EchoMultiServer_echo");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_socket_EchoMultiServer_echo waitTo(){
    com_baeldung_socket_EchoMultiServer_echo _waitTo = null;
    //if(com_baeldung_socket_EchoMultiServer_echo == null){
            try{
                logger.debug("waiting for com_baeldung_socket_EchoMultiServer_echo");
                //com_baeldung_socket_EchoMultiServer_echo = new com_baeldung_socket_EchoMultiServer_echo();
                lock = new CountDownLatch(1);
                _waitTo =  new com_baeldung_socket_EchoMultiServer_echo(){
                        @Override
                        public Object[] com_baeldung_socket_EchoMultiServer_echo(java.lang.String message){
                        try{
                            logger.debug("done waiting for com_baeldung_socket_EchoMultiServer_echo");
                            seen = true;
                            logger.debug("got call for com_baeldung_socket_EchoMultiServer_echo seen:"+seen);
                            com_baeldung_socket_EchoMultiServer_echo.message = com_baeldung_socket_EchoMultiServer_echo.message == null ? message : com_baeldung_socket_EchoMultiServer_echo.message;
                            org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_socket_EchoMultiServer_echo");
                            lock.countDown();
                            return new Object[]{com_baeldung_socket_EchoMultiServer_echo.message            };
                        }catch (Exception e){
                                 logger.error("fail waitTo ",e);
                        }
                        return new Object[]{};
                    }
                };
                 {
                      org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_socket_EchoMultiServer_echo", _waitTo);
                 }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_socket_EchoMultiServer_echo");
                }
            }catch (Exception e){
               logger.error("fail waitTo ",e);
            }
        //}
        return _waitTo;
    }

    public static com_baeldung_socket_EchoMultiServer_echo waitTo(Handler<AsyncResult<com_baeldung_socket_EchoMultiServer_echo>> resultHandler)throws Exception{
    com_baeldung_socket_EchoMultiServer_echo _waitTo = null;
    //if(com_baeldung_socket_EchoMultiServer_echo == null){
            try{
                logger.debug("waiting for com_baeldung_socket_EchoMultiServer_echo");
               // com_baeldung_socket_EchoMultiServer_echo = new com_baeldung_socket_EchoMultiServer_echo();
                lock = new CountDownLatch(1);
                _waitTo = new com_baeldung_socket_EchoMultiServer_echo(){
                     @Override
                     public Object[] com_baeldung_socket_EchoMultiServer_echo(                        java.lang.String message){
                    try{
                        logger.debug("done waiting for com_baeldung_socket_EchoMultiServer_echo");
                        seen = true;
                        logger.debug("got call for com_baeldung_socket_EchoMultiServer_echo seen:"+seen);
                         com_baeldung_socket_EchoMultiServer_echo.message = com_baeldung_socket_EchoMultiServer_echo.message == null ? message : com_baeldung_socket_EchoMultiServer_echo.message;
                         org.softauto.listener.server.ListenerObserver.getInstance().unRegister("com_baeldung_socket_EchoMultiServer_echo");
                         lock.countDown();
                         return new Object[]{com_baeldung_socket_EchoMultiServer_echo.message                            };
                         }catch (Exception e){
                               logger.error("fail waitTo ",e);
                         }
                         return new Object[]{};
                    }
            };
                {
                    org.softauto.listener.server.ListenerObserver.getInstance().register("com_baeldung_socket_EchoMultiServer_echo", _waitTo);
                }
                lock.await(timeOutInMin, TimeUnit.MINUTES);
                if(lock.getCount() > 0){
                     throw new Exception("timeOut for lock ");
                }else {
                    logger.debug("successfully wait to com_baeldung_socket_EchoMultiServer_echo");
                }
                resultHandler.handle(Future.handleResult( _waitTo));
            }catch (Exception e){
               logger.error("fail waitTo ",e);
               resultHandler.handle(Future.handleError(e));
            }
        //}
        return _waitTo;
    }




    public java.lang.String getMessage()throws Exception{
        return com_baeldung_socket_EchoMultiServer_echo.message;
    }

    public com_baeldung_socket_EchoMultiServer_echo getMessage(Handler<AsyncResult<java.lang.String>> resultHandler)throws Exception{
        resultHandler.handle(Future.handleResult(com_baeldung_socket_EchoMultiServer_echo.message));
        return this;
    }

    public com_baeldung_socket_EchoMultiServer_echo getMessage(CallFuture<java.lang.String> future)throws Exception{
       future.handleResult(com_baeldung_socket_EchoMultiServer_echo.message);
       return this;
    }

    public com_baeldung_socket_EchoMultiServer_echo setMessage(java.lang.String message)throws Exception{
        com_baeldung_socket_EchoMultiServer_echo.message = message;
        return this;
    }





}

}