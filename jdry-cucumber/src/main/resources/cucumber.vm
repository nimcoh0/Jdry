package tests.infrastructure;

import io.cucumber.java.After;
import io.cucumber.java.AfterStep;
import io.cucumber.java.Before;
import io.cucumber.java.BeforeStep;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.softauto.tester.Client;
import org.softauto.listener.ListenerInit;
import org.softauto.plugin.ProviderManager;
import org.softauto.plugin.spi.PluginProvider;
import com.fasterxml.jackson.databind.ObjectMapper;
//import org.testng.annotations.AfterSuite;
//import org.testng.annotations.BeforeSuite;
import org.softauto.listener.ListenerObserver;
//import org.testng.annotations.AfterMethod;
//import org.testng.annotations.BeforeMethod;
//import org.testng.ITestContext;
import java.lang.reflect.Method;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import org.softauto.core.Utils;
import com.esotericsoftware.minlog.Log;
import static com.esotericsoftware.minlog.Log.*;
import java.util.Properties;
import java.io.FileInputStream;
import java.io.InputStream;

@org.apache.avro.specific.AvroGenerated
public class CucumberAbstractTester {

    private static final Logger logger = LogManager.getLogger(CucumberAbstractTester.class);

    public StepService tests;
    public StepService.Callback asyncTests;
    public ListenerService listeners;
    public ListenerService.Callback asyncListeners;
    public ObjectMapper objectMapper = new ObjectMapper();



    public CucumberAbstractTester(){
        try {
            tests =  Client.create(tests.infrastructure.StepService.class);
            asyncTests =  Client.create(tests.infrastructure.StepService.Callback.class);
            listeners = Client.create(tests.infrastructure.ListenerService.class);
            asyncListeners = Client.create(tests.infrastructure.ListenerService.Callback.class);
            ListenerInit.getInstance().loadConfiguration().initilize().register().startLifeCycle();
            Log.set(LEVEL_TRACE);
            loadPlugins();
            testStart();
        }catch (Exception e){
            logger.error("fail start listener ",e);
        }
    }



   public void testStart(){
        ListenerInit.getInstance().startTest("bb");
        //ListenerObserver.getInstance().register("tests.infrastructure.ListenerServiceImpl",ListenerInit.getInstance().getListenerServiceImpl());
        org.softauto.logger.LogManager.setStatus(true);
   }


    public void endTest(io.cucumber.java.Scenario scenario){
        org.softauto.logger.LogManager.setStatus(false);
        ListenerInit.getInstance().endTest(scenario.getName());
        ListenerObserver.getInstance().reset();

    }


    public void finalize() {
        try {
            ListenerInit.getInstance().shutdown();
            logger.info("shutdown down Listener");
        } catch (Exception e) {
           logger.error("fail shutdown listener ",e);
        }
    }

    public  void loadPlugins(){
        try {
            for(PluginProvider provider : ProviderManager.providers()){
                if(!provider.getName().equals("RPC")) {
                   provider.create().initilize().register();
                   logger.info("plugin " + provider.getName() + "load successfully");
                }
            }
        }catch (Exception e){
            logger.error("fail to load plugins  ",e);
        }
    }

}