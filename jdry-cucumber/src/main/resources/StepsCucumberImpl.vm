#if ($protocol.getNamespace())
package $this.mangle($protocol.getNamespace());
#end
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import io.cucumber.java.en.Given;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.cucumber.java.ParameterType;
import org.softauto.core.CallFuture;

#if ($protocol.getDoc())
/** $protocol.getDoc() */
#end
#foreach ($annotation in $this.javaAnnotations($protocol))
@$annotation
#end
@org.apache.avro.specific.AvroGenerated
public class $this.mangle($protocol.getName())CucumberImpl extends AbstractTester implements $this.mangle($protocol.getName()){

    private static Logger logger = LogManager.getLogger($this.mangle($protocol.getName())CucumberImpl.class);



#foreach ($e in $protocol.getMessages().entrySet())
#set ($name = $e.getKey())
#set ($message = $e.getValue())
#set ($response = $message.getResponse())
  /**
#if ($message.getDoc())
   * $this.escapeForJavadoc($message.getDoc())
#end
#foreach ($p in $message.getRequest().getFields())##
#if ($p.doc())   * @param ${this.mangle($p.name())} $p.doc()
#end
#end
   */
#foreach ($annotation in $this.javaAnnotations($message))
  @$annotation
#end
#foreach ($p in $message.getRequest().getFields())##
#if(!$cucumber.isSupportedType($p.schema().getType()))##
#set ($varName = $cucumber.getVarName($p.name()))
$p.setName($varName)
@ParameterType(".*")
public ${this.javaUnbox($p.schema(),false)} $varName (String $varName)throws Exception{
#if($p.schema().isPrimitive())
      return ${this.capitalizeFirstLetter($p.schema().getName())}.valueOf($varName);
#else
      return new ObjectMapper().readValue($varName, ${this.javaTypeNamespace($p.schema())}.${this.javaTypeName($p.schema())}.class);
#end
}
#end #if($foreach.hasNext)#end
#end
@Given("sync ${this.mangle($name)} ##
#foreach ($p in $message.getRequest().getFields())##
#if($cucumber.isSupportedType($p.schema().getType())) {$p.schema().getName()} #else {$p.name()} #end #if ($foreach.hasNext), #end
#end ##
")
public ##
#foreach ($p in $message.getRequest().getFields())##
#if($p.schema().isGeneric())<${this.javaUnbox($p.schema(),false)}>#end#if($foreach.hasNext)#end ##
#end
${this.javaUnbox($response, true)} ${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} $p.name()#if ($foreach.hasNext), #end
#end
)#if (! $message.isOneWay() && $message.getErrors().getTypes().size() > 1)
 throws ##
## The first error is always "string", so we skip it.
#foreach ($error in $message.getErrors().getTypes().subList(1, $message.getErrors().getTypes().size()))
${this.mangle($error.getFullName())}##
#if ($foreach.hasNext), #end
#end##    (error list)
#end##    (one way)
{
#if (${this.javaUnbox($response, true)} != "void" )
    return ##
#end
tests.${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
);
}
#set ($varName = $cucumber.getVarName("future"))
@ParameterType(".*")
public CallFuture $varName (String $varName)throws Exception{
   return new ObjectMapper().readValue($varName, CallFuture.class);
}

@Given("async ${this.mangle($name)} ##
#foreach ($p in $message.getRequest().getFields())##
#if($cucumber.isSupportedType($p.schema().getType())) {$p.schema().getName()} #else {$p.name()} #end #if ($foreach.hasNext), #end
#end ##
")
public ##
#foreach ($p in $message.getRequest().getFields())##
#if($p.schema().isGeneric())<${this.javaUnbox($p.schema(),false)}>#end#if($foreach.hasNext)#end ##
#end
void async_${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.javaUnbox($p.schema(), false)} $p.name()#if ($foreach.hasNext), #end
#end
#if($message.getRequest().getFields().size()>0),#end CallFuture<$message.getResponseTypeForCallBack()> $varName##
)throws Exception #if (! $message.isOneWay() && $message.getErrors().getTypes().size() > 1)
 throws ##
## The first error is always "string", so we skip it.
#foreach ($error in $message.getErrors().getTypes().subList(1, $message.getErrors().getTypes().size()))
${this.mangle($error.getFullName())}##
#if ($foreach.hasNext), #end
#end##    (error list)
#end##    (one way)
{
#*      *#asyncTests.${this.mangle($name)}(##
#foreach ($p in $message.getRequest().getFields())##
#*      *#${this.mangle($p.name())}#if ($foreach.hasNext), #end
#end
#if($message.getRequest().getFields().size()>0),#end $varName);
}

#end## (requests)
}## End of protocol interface
