package tests.infrastructure;


import org.softauto.tester.listener.ListenerObserver;
import org.softauto.tester.listener.ListenerServerProviderImpl;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.softauto.tester.Client;
import org.softauto.plugin.ProviderManager;
import org.softauto.plugin.spi.PluginProvider;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.ITestContext;
import java.lang.reflect.Method;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import org.softauto.core.Utils;
import com.esotericsoftware.minlog.Log;
import static com.esotericsoftware.minlog.Log.*;
import org.softauto.system.SystemProviderImpl;

@org.apache.avro.specific.AvroGenerated
public class AbstractTesterImpl {

    private static final Logger logger = LogManager.getLogger(AbstractTesterImpl.class);
    static boolean initialize = false;
    public StepService tests;
    public LocalStepService localTests;
    public StepService.Callback asyncTests;
    public LocalStepService.Callback localAsyncTests;
    public ListenerService listeners;
    public ListenerService.Callback asyncListeners;
    public ObjectMapper objectMapper = new ObjectMapper();

    @BeforeSuite
    public void start(){
        try {
        if(!initialize){
            initialize = true;
            tests =  Client.create(tests.infrastructure.StepService.class);
            localTests = Client.create(tests.infrastructure.LocalStepService.class);
            asyncTests =  Client.create(tests.infrastructure.StepService.Callback.class);
            localAsyncTests =  Client.create(tests.infrastructure.LocalStepService.Callback.class);
            listeners = Client.create(tests.infrastructure.ListenerService.class);
            asyncListeners = Client.create(tests.infrastructure.ListenerService.Callback.class);
            //ListenerInit.getInstance().loadConfiguration().initilize().register();
            //Log.set(LEVEL_TRACE);
           loadPlugins();
           }
        }catch (Exception e){
            logger.error("fail start listener ",e);
        }
    }

   @BeforeMethod
   public void testStart(Method method){
        SystemProviderImpl.getInstance().startTest(method.getName());
        //ListenerObserver.getInstance().register("tests.infrastructure.ListenerServiceImpl",ListenerInit.getInstance().getListenerServiceImpl());
        org.softauto.logger.LogManager.setStatus(true);
   }

    @AfterMethod
    public void endTest(Method method){
        org.softauto.logger.LogManager.setStatus(false);
        SystemProviderImpl.getInstance().endTest(method.getName());
        ListenerObserver.getInstance().reset();

    }

    @AfterSuite
    public void finalize() {
        try {
            ListenerServerProviderImpl.getInstance().shutdown();
            SystemProviderImpl.getInstance().shutdown();
            logger.info("shutdown down Listener");
        } catch (Exception e) {
           logger.error("fail shutdown listener ",e);
        }
    }

    public  void loadPlugins(){
        try {
            for(PluginProvider provider : ProviderManager.providers()){
                if(!provider.getName().equals("RPC")) {
                   provider.create().initilize().register();
                   logger.info("plugin " + provider.getName() + "load successfully");
                }
            }
        }catch (Exception e){
            logger.error("fail to load plugins  ",e);
        }
    }

}