/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tests.infrastructure;
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import io.cucumber.java.en.Given;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.cucumber.java.ParameterType;
import org.softauto.serializer.CallFuture;
import org.softauto.core.Utils;
import java.lang.reflect.Field;
import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;
import java.util.List;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.ExecutionException;
import io.cucumber.java.en.When;
import io.cucumber.java.en.Then;
import org.junit.Assert;
import io.cucumber.datatable.DataTable;
import java.util.Map;
import java.util.*;
import org.softauto.cucumber.*;

@org.apache.avro.specific.AvroGenerated
public class StepServiceCucumberImpl extends CucumberAbstractTesterImpl {
    private static Logger logger = LogManager.getLogger(StepServiceCucumberImpl.class);

    public StepServiceCucumberImpl(){
        registerGlueClass(this);
    }





@ParameterType(".*")
public String exp (String exp) throws Exception{
    return exp;
}

@Then("result of {exp}")
public void validate(String exp )throws Exception{
    String left = CucumberUtils.getLeft(exp);
    String right = CucumberUtils.getRight(exp);
    String operator = CucumberUtils.getOperator(exp);
    boolean result = getResult(CucumberUtils.expToGetter(left) +" "+ operator +" "+ CucumberUtils.expToGetter(right));
    Assert.assertTrue(result);
}



 
public java.util.List<app.books.Book> BookList;

@When("Get Books ")
@Given("Get Books")
public java.util.List<app.books.Book> app_books_BookCatalog_getBooks(){
    BookList = tests.app_books_BookCatalog_getBooks();
    return BookList;
}
@Then("books {exp}")
public void validate_getBooks(String exp )throws Exception{
    String left = CucumberUtils.getLeft(exp);
    String right = CucumberUtils.getRight(exp);
    String operator = CucumberUtils.getOperator(exp);
    boolean result = getResult(CucumberUtils.expToGetter("BookList"+" "+left) +" "+ operator +" "+ CucumberUtils.expToGetter(right));
    Assert.assertTrue(result);
}



@ParameterType(".*")
public CallFuture future0 (String future0)throws Exception{
   return new CallFuture<java.util.List<app.books.Book>>();
}
java.util.List<app.books.Book> BookList0;


CallFuture<java.util.List<app.books.Book>> future0;
java.util.List<app.books.Book> async_getBooks_result;


public java.util.List<app.books.Book> getFuture0() throws ExecutionException, InterruptedException{
        async_getBooks_result =  future0.get();
        return async_getBooks_result;
}

@When("Get Books  #async")
@Given("Get Books #async")
public void async_app_books_BookCatalog_getBooks()throws Exception {
future0 = new CallFuture<>();
asyncTests.app_books_BookCatalog_getBooks( future0);
}





@ParameterType(".*")
public app.books.Book book (String book)throws Exception{
if(Utils.isJson(book)){
      return new ObjectMapper().readValue(book, app.books.Book.class);
}
      ExpressionParser parser = new SpelExpressionParser();
      StandardEvaluationContext itemContext = getContext(book);
      if(itemContext == null){
          itemContext = new StandardEvaluationContext(this);
       }
      Expression exp2 = parser.parseExpression(book);
      app.books.Book result = (app.books.Book) exp2.getValue(itemContext,app.books.Book.class);

return result;
}

 

@When("Add Book  from  {book}")
@Given("Add Book from  {book}")
public void app_books_BookStore_addBook(app.books.Book book){
tests.app_books_BookStore_addBook(book);
}



public List<app.books.Book> bookList;
     @When("got list of Book")
     @Given("list of Book")
     public List<app.books.Book> create_app_books_Book (DataTable table){
     try{
        List<Map<String, String>> map = table.asMaps(String.class, String.class);
        String json = new ObjectMapper().writeValueAsString(map);
        app.books.Book[] res = new ObjectMapper().readValue(json, app.books.Book[].class);
        bookList = Arrays.asList(res);
     }catch (Exception e){
        e.printStackTrace();
     }
     return   bookList;
     }


@ParameterType(".*")
public CallFuture future1 (String future1)throws Exception{
   return new CallFuture<Void>();
}



@ParameterType(".*")
public app.books.Book book0 (String book0)throws Exception{
if(Utils.isJson(book0)){
      return new ObjectMapper().readValue(book0, app.books.Book.class);
}
      ExpressionParser parser = new SpelExpressionParser();
      StandardEvaluationContext itemContext = getContext(book0);
      if(itemContext == null){
          itemContext = new StandardEvaluationContext(this);
      }
      Expression exp2 = parser.parseExpression(book0);
      app.books.Book result = (app.books.Book) exp2.getValue(itemContext,app.books.Book.class);

return result;
}
//public app.books.Book book0;

CallFuture<Void> future1;
Void async_addBook_result;


public Void getFuture1() throws ExecutionException, InterruptedException{
        async_addBook_result =  future1.get();
        return async_addBook_result;
}

@When("Add Book  from  {book0} #async")
@Given("Add Book from  {book0} #async")
public void async_app_books_BookStore_addBook(app.books.Book book0)throws Exception {
future1 = new CallFuture<>();
asyncTests.app_books_BookStore_addBook(book0, future1);
}





@ParameterType(".*")
public java.util.Collection<app.books.Book> books (String books)throws Exception{
if(Utils.isJson(books)){
      return new ObjectMapper().readValue(books, java.util.Collection.class);
}
      ExpressionParser parser = new SpelExpressionParser();
      StandardEvaluationContext itemContext = getContext(books);
      if(itemContext == null){
          itemContext = new StandardEvaluationContext(this);
       }
      Expression exp2 = parser.parseExpression(books);
      java.util.Collection<app.books.Book> result = (java.util.Collection<app.books.Book>) exp2.getValue(itemContext,java.util.Collection.class);

return result;
}

 

@When("Add Books  from  {books}")
@Given("Add All Books from  {books}")
public void app_books_BookStore_addAllBooks(java.util.Collection<app.books.Book> books){
tests.app_books_BookStore_addAllBooks(books);
}



@ParameterType(".*")
public CallFuture future2 (String future2)throws Exception{
   return new CallFuture<Void>();
}



@ParameterType(".*")
public java.util.Collection<app.books.Book> books0 (String books0)throws Exception{
if(Utils.isJson(books0)){
      return new ObjectMapper().readValue(books0, java.util.Collection.class);
}
      ExpressionParser parser = new SpelExpressionParser();
      StandardEvaluationContext itemContext = getContext(books0);
      if(itemContext == null){
          itemContext = new StandardEvaluationContext(this);
      }
      Expression exp2 = parser.parseExpression(books0);
      java.util.Collection<app.books.Book> result = (java.util.Collection<app.books.Book>) exp2.getValue(itemContext,app.books.Book.class);

return result;
}
//public java.util.Collection<app.books.Book> books0;

CallFuture<Void> future2;
Void async_addAllBooks_result;


public Void getFuture2() throws ExecutionException, InterruptedException{
        async_addAllBooks_result =  future2.get();
        return async_addAllBooks_result;
}

@When("Add Books  from  {books0} #async")
@Given("Add All Books from  {books0} #async")
public void async_app_books_BookStore_addAllBooks(java.util.Collection<app.books.Book> books0)throws Exception {
future2 = new CallFuture<>();
asyncTests.app_books_BookStore_addAllBooks(books0, future2);
}





@ParameterType(".*")
public java.lang.String author (String author)throws Exception{
if(Utils.isJson(author)){
      return new ObjectMapper().readValue(author, java.lang.String.class);
}
      ExpressionParser parser = new SpelExpressionParser();
      StandardEvaluationContext itemContext = getContext(author);
      if(itemContext == null){
          itemContext = new StandardEvaluationContext(this);
       }
      Expression exp2 = parser.parseExpression(author);
      java.lang.String result = (java.lang.String) exp2.getValue(itemContext,java.lang.String.class);

return result;
}

 
public java.util.List<app.books.Book> BookList1;

@When("got Books By Author with author {author}")
@Given("Author Books with author {author}")
public java.util.List<app.books.Book> app_books_BookStore_booksByAuthor(java.lang.String author){
    BookList1 = tests.app_books_BookStore_booksByAuthor(author);
    return BookList1;
}
@Then("author books {exp}")
public void validate_booksByAuthor(String exp )throws Exception{
    String left = CucumberUtils.getLeft(exp);
    String right = CucumberUtils.getRight(exp);
    String operator = CucumberUtils.getOperator(exp);
    boolean result = getResult(CucumberUtils.expToGetter("BookList1"+" "+left) +" "+ operator +" "+ CucumberUtils.expToGetter(right));
    Assert.assertTrue(result);
}



@ParameterType(".*")
public CallFuture future3 (String future3)throws Exception{
   return new CallFuture<java.util.List<app.books.Book>>();
}
java.util.List<app.books.Book> BookList2;



@ParameterType(".*")
public java.lang.String author0 (String author0)throws Exception{
if(Utils.isJson(author0)){
      return new ObjectMapper().readValue(author0, java.lang.String.class);
}
      ExpressionParser parser = new SpelExpressionParser();
      StandardEvaluationContext itemContext = getContext(author0);
      if(itemContext == null){
          itemContext = new StandardEvaluationContext(this);
      }
      Expression exp2 = parser.parseExpression(author0);
      java.lang.String result = (java.lang.String) exp2.getValue(itemContext,java.lang.String.class);

return result;
}
//public java.lang.String author0;

CallFuture<java.util.List<app.books.Book>> future3;
java.util.List<app.books.Book> async_booksByAuthor_result;


public java.util.List<app.books.Book> getFuture3() throws ExecutionException, InterruptedException{
        async_booksByAuthor_result =  future3.get();
        return async_booksByAuthor_result;
}

@When("got Books By Author with author {author0} #async")
@Given("Author Books with author {author0} #async")
public void async_app_books_BookStore_booksByAuthor(java.lang.String author0)throws Exception {
future3 = new CallFuture<>();
asyncTests.app_books_BookStore_booksByAuthor(author0, future3);
}





@ParameterType(".*")
public java.lang.String title (String title)throws Exception{
if(Utils.isJson(title)){
      return new ObjectMapper().readValue(title, java.lang.String.class);
}
      ExpressionParser parser = new SpelExpressionParser();
      StandardEvaluationContext itemContext = getContext(title);
      if(itemContext == null){
          itemContext = new StandardEvaluationContext(this);
       }
      Expression exp2 = parser.parseExpression(title);
      java.lang.String result = (java.lang.String) exp2.getValue(itemContext,java.lang.String.class);

return result;
}

 
public java.util.Optional<app.books.Book> Book;

@When("got Book By Title with title {title}")
@Given("Book Title with title {title}")
public java.util.Optional<app.books.Book> app_books_BookStore_bookByTitle(java.lang.String title){
    Book = tests.app_books_BookStore_bookByTitle(title);
    return Book;
}
@Then("book title {exp}")
public void validate_bookByTitle(String exp )throws Exception{
    String left = CucumberUtils.getLeft(exp);
    String right = CucumberUtils.getRight(exp);
    String operator = CucumberUtils.getOperator(exp);
    boolean result = getResult(CucumberUtils.expToGetter("Book"+" "+left) +" "+ operator +" "+ CucumberUtils.expToGetter(right));
    Assert.assertTrue(result);
}



@ParameterType(".*")
public CallFuture future4 (String future4)throws Exception{
   return new CallFuture<java.util.Optional<app.books.Book>>();
}
java.util.Optional<app.books.Book> Book0;



@ParameterType(".*")
public java.lang.String title0 (String title0)throws Exception{
if(Utils.isJson(title0)){
      return new ObjectMapper().readValue(title0, java.lang.String.class);
}
      ExpressionParser parser = new SpelExpressionParser();
      StandardEvaluationContext itemContext = getContext(title0);
      if(itemContext == null){
          itemContext = new StandardEvaluationContext(this);
      }
      Expression exp2 = parser.parseExpression(title0);
      java.lang.String result = (java.lang.String) exp2.getValue(itemContext,java.lang.String.class);

return result;
}
//public java.lang.String title0;

CallFuture<java.util.Optional<app.books.Book>> future4;
java.util.Optional<app.books.Book> async_bookByTitle_result;


public java.util.Optional<app.books.Book> getFuture4() throws ExecutionException, InterruptedException{
        async_bookByTitle_result =  future4.get();
        return async_bookByTitle_result;
}

@When("got Book By Title with title {title0} #async")
@Given("Book Title with title {title0} #async")
public void async_app_books_BookStore_bookByTitle(java.lang.String title0)throws Exception {
future4 = new CallFuture<>();
asyncTests.app_books_BookStore_bookByTitle(title0, future4);
}


}