/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tests.infrastructure;
import java.util.function.Function;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import io.cucumber.java.en.When;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.cucumber.java.ParameterType;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.lang.reflect.Field;
import org.softauto.core.Utils;
import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;
import io.cucumber.java.en.Then;
import org.junit.Assert;
import java.util.List;
import org.softauto.cucumber.*;

@org.apache.avro.specific.AvroGenerated
public class ListenerServiceCucumberImpl  extends CucumberAbstractTesterImpl{
    private static Logger logger = LogManager.getLogger(ListenerServiceCucumberImpl.class);

    public ListenerServiceCucumberImpl(){
          try {
             if( Class.forName("org.softauto.listener.ListenerObserver", false, this.getClass().getClassLoader())!= null){
                 org.softauto.tester.listener.ListenerObserver.getInstance().register("tests.infrastructure.ListenerServiceCucumberImpl", this);
             }
             registerGlueClass(this);
         }catch (Exception e){
           // e.printStackTrace();
         }
    }




 @ParameterType(".*")
 public String exp0 (String exp0) throws Exception{
     return exp0;
 }


@Then("validate listener result of {exp0}")
public void validate(String exp0)throws Exception{
    String left = CucumberUtils.getLeft(exp0);
        String right = CucumberUtils.getRight(exp0);
        String operator = CucumberUtils.getOperator(exp0);
        boolean result = getResult(CucumberUtils.expToGetter(left) +" "+ operator +" "+ CucumberUtils.expToGetter(right));
        Assert.assertTrue(result);
}







public app.books.Book addBook_book1;


@Then("result of Add Book book {exp0}")
public void validate_addBookResult_book1(String exp0 )throws Exception{
    String left = CucumberUtils.getLeft(exp0);
    String right = CucumberUtils.getRight(exp0);
    String operator = CucumberUtils.getOperator(exp0);
    boolean result = getResult(CucumberUtils.expToGetter("addBook_book1"+" "+left) +" "+ operator +" "+ CucumberUtils.expToGetter(right));
    Assert.assertTrue(result);
}


 


@When("wait for result of  Add Book")
public java.lang.Object[] app_books_BookCatalog_addBook_result(){
AtomicReference<Object[]> ref = new AtomicReference();
try {
    CountDownLatch lock = new CountDownLatch(1);
    new ListenerServiceImpl() {
        @Override
        public void app_books_BookCatalog_addBook_result(app.books.Book book1 ) {
        addBook_book1  = book1 ;
        ref.set(new Object[]{book1 });
        lock.countDown();
        }
     };
    lock.await(10, TimeUnit.MINUTES);
}catch (Exception e){
   e.printStackTrace();
}
return ref.get();
}








public app.books.Book addBook_book2;


@Then("Add Book book {exp0}")
public void validate_addBook_book2(String exp0 )throws Exception{
    String left = CucumberUtils.getLeft(exp0);
    String right = CucumberUtils.getRight(exp0);
    String operator = CucumberUtils.getOperator(exp0);
    boolean result = getResult(CucumberUtils.expToGetter("addBook_book2"+" "+left) +" "+ operator +" "+ CucumberUtils.expToGetter(right));
    Assert.assertTrue(result);
}


 


@ParameterType(".*")
 public String exps0 (String exps0) throws Exception{
     return exps0;
 }
 @ParameterType(".*")
 public String values0 (String values0) throws Exception{
        return values0;
 }
@When("update Add Book  arguments{exps0} with {values0}")
public java.lang.Object[] app_books_BookCatalog_addBook(String exps0 ,String values0){
AtomicReference<Object[]> ref = new AtomicReference();
try {
    CountDownLatch lock = new CountDownLatch(1);
    new ListenerServiceImpl() {
        @Override
        public java.lang.Object[] app_books_BookCatalog_addBook(app.books.Book book2 ) {
        addBook_book2 = book2;
        String[] _exps = exps0.split(",");
        String[] _values = values0.split(",");
        for(int i=0;i<_exps.length;i++){
            Object v = evulExp(_values[i]);
            setResult(_exps[i],v);
        }
        lock.countDown();
        return new Object[]{book2 };
         };
     };
    lock.await(10, TimeUnit.MINUTES);
}catch (Exception e){
   e.printStackTrace();
}
return ref.get();
}



}