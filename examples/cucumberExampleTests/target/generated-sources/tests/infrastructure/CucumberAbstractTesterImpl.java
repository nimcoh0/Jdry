/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tests.infrastructure;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.softauto.tester.Client;
import org.softauto.tester.listener.ListenerServerProviderImpl;
import org.softauto.plugin.ProviderManager;
import org.softauto.plugin.spi.PluginProvider;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.softauto.tester.listener.ListenerObserver;
import org.softauto.core.Utils;

import java.util.ArrayList;
import java.util.List;

import org.softauto.tester.system.SystemImpl;
import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;

@org.apache.avro.specific.AvroGenerated
public class CucumberAbstractTesterImpl {

    private static final Logger logger = LogManager.getLogger(CucumberAbstractTesterImpl.class);
    static boolean initialize = false;
    public static StepService tests;
    public static StepService.Callback asyncTests;
    public static ListenerService listeners;
    public static ListenerService.Callback asyncListeners;
    public ObjectMapper objectMapper = new ObjectMapper();
    public static List<Object> glueClassList = new ArrayList<>();



    public CucumberAbstractTesterImpl(){
        try {
        if(!initialize){
            initialize = true;
            tests =  Client.create(tests.infrastructure.StepService.class);
            asyncTests =  Client.create(tests.infrastructure.StepService.Callback.class);
            listeners = Client.create(tests.infrastructure.ListenerService.class);
            asyncListeners = Client.create(tests.infrastructure.ListenerService.Callback.class);
            //ListenerInit.getInstance().loadConfiguration().initilize().register();
            //Log.set(LEVEL_TRACE);
            loadPlugins();
            testStart();
            }
        }catch (Exception e){
            logger.error("fail start listener ",e);
        }
    }

    public static void registerGlueClass(Object obj){
        glueClassList.add(obj);
    }

    public static List<Object> getGlueClassList() {
        return glueClassList;
    }



   public void testStart(){
        SystemImpl.getInstance().startTest("bb");
        //ListenerObserver.getInstance().register("tests.infrastructure.ListenerServiceImpl",ListenerInit.getInstance().getListenerServiceImpl());
        org.softauto.logger.LogManager.setStatus(true);
   }


    public void endTest(io.cucumber.java.Scenario scenario){
        org.softauto.logger.LogManager.setStatus(false);
        SystemImpl.getInstance().endTest(scenario.getName());
        ListenerObserver.getInstance().reset();

    }


    public void finalize() {
        try {
            ListenerServerProviderImpl.getInstance().shutdown();
            SystemImpl.getInstance().shutdown();
            logger.info("shutdown down Listener");
        } catch (Exception e) {
           logger.error("fail shutdown listener ",e);
        }
    }

    public  void loadPlugins(){
        try {
            for(PluginProvider provider : ProviderManager.providers()){
                if(!provider.getName().equals("RPC")) {
                   provider.create().initilize().register();
                   logger.info("plugin " + provider.getName() + "load successfully");
                }
            }
        }catch (Exception e){
            logger.error("fail to load plugins  ",e);
        }
    }

    public StandardEvaluationContext getContext(String exp){
            StandardEvaluationContext itemContext = null;
            String item = null;
            if(exp.contains(".")) {
               item = exp.substring(0, exp.indexOf("."));
            }else{
              item = exp;
            }
            List<Object> objects = getGlueClassList();
            for(Object o: objects){
                if(Utils.hasField(o.getClass(),item)){
                    return new StandardEvaluationContext(o);
                }
            }
            return itemContext;
        }

            public boolean getResult (String result)throws Exception{
                 ExpressionParser parser = new SpelExpressionParser();
                 StandardEvaluationContext itemContext = getContext(result);
                 if(itemContext == null){
                    throw new Exception("fail to evul " + result );
                  }
                 Expression exp2 = parser.parseExpression(result);
                 boolean res = (java.lang.Boolean) exp2.getValue(itemContext,Boolean.class);
                 return res;
            }

            public void setResult (String exp,Object value){
                ExpressionParser parser = new SpelExpressionParser();
                StandardEvaluationContext itemContext = getContext(exp);
                if(itemContext == null){
                   return;
                }
                parser.parseExpression(exp).setValue(itemContext,value);
            }


            public Object evulExp(String exp){
                ExpressionParser parser = new SpelExpressionParser();
                StandardEvaluationContext itemContext = getContext(exp);
                if(itemContext == null){
                    return exp;
                 }
                Expression exp2 = parser.parseExpression(exp);
                return exp2.getValue(itemContext);
            }

}